<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript原型与原型链</title>
    <url>/2020/06/06/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1.构造函数和原型"></a>1.构造函数和原型</h2><h3 id="1-1-对象的三种创建方式"><a href="#1-1-对象的三种创建方式" class="headerlink" title="1.1 对象的三种创建方式"></a>1.1 对象的三种创建方式</h3><ol>
<li><p>字面量方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>new关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">'zs'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="1-2-静态成员和实例成员"><a href="#1-2-静态成员和实例成员" class="headerlink" title="1.2 静态成员和实例成员"></a>1.2 静态成员和实例成员</h3><h4 id="1-2-1-实例成员"><a href="#1-2-1-实例成员" class="headerlink" title="1.2.1 实例成员"></a>1.2.1 实例成员</h4><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">     <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.uname);<span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-静态成员"><a href="#1-2-2-静态成员" class="headerlink" title="1.2.2 静态成员"></a>1.2.2 静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">     <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Star.sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Star.sex);<span class="comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-构造函数的问题"><a href="#1-3-构造函数的问题" class="headerlink" title="1.3 构造函数的问题"></a>1.3 构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p>
<h3 id="1-4-构造函数原型prototype"><a href="#1-4-构造函数原型prototype" class="headerlink" title="1.4 构造函数原型prototype"></a>1.4 构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p>
<p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p>
<p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line">ldh.sing();<span class="comment">//我会唱歌</span></span><br><span class="line">zxy.sing();<span class="comment">//我会唱歌</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-对象原型"><a href="#1-5-对象原型" class="headerlink" title="1.5 对象原型"></a>1.5 对象原型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure>

<h3 id="1-6-constructor构造函数"><a href="#1-6-constructor构造函数" class="headerlink" title="1.6 constructor构造函数"></a>1.6 constructor构造函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure>

<p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"> Star.prototype = &#123;</span><br><span class="line"> <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">   <span class="keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">   sing: function() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会演电影'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy)</span><br></pre></td></tr></table></figure>

<h3 id="1-7原型链"><a href="#1-7原型链" class="headerlink" title="1.7原型链"></a>1.7原型链</h3><p>​    每一个实例对象又有一个<strong>proto</strong>属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有<strong>proto</strong>属性，这样一层一层往上找就形成了原型链。</p>
<h3 id="1-8构造函数实例和原型对象三角关系"><a href="#1-8构造函数实例和原型对象三角关系" class="headerlink" title="1.8构造函数实例和原型对象三角关系"></a>1.8构造函数实例和原型对象三角关系</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="number">3.</span>构造函数的原型对象的<span class="keyword">constructor</span>属性指向了构造函数,实例对象的原型的<span class="keyword">constructor</span>属性也指向了构造函数</span><br></pre></td></tr></table></figure>

<h3 id="1-9原型链和成员的查找机制"><a href="#1-9原型链和成员的查找机制" class="headerlink" title="1.9原型链和成员的查找机制"></a>1.9原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有<strong>proto</strong>属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure>

<h3 id="1-10原型对象中this指向"><a href="#1-10原型对象中this指向" class="headerlink" title="1.10原型对象中this指向"></a>1.10原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="built_in">console</span>.log(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure>

<h3 id="1-11通过原型为数组扩展内置方法"><a href="#1-11通过原型为数组扩展内置方法" class="headerlink" title="1.11通过原型为数组扩展内置方法"></a>1.11通过原型为数组扩展内置方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">  sum += <span class="keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JavaScript的this与闭包</title>
    <url>/2020/06/06/JavaScript%E7%9A%84this%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="1-this"><a href="#1-this" class="headerlink" title="1.this"></a>1.this</h2><h3 id="1-1-函数内部的-this-指向"><a href="#1-1-函数内部的-this-指向" class="headerlink" title="1.1 函数内部的 this 指向"></a>1.1 函数内部的 this 指向</h3><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了 this 的指向不同</p>
<p>一般指向我们的调用者.</p>
<a id="more"></a>

<h3 id="1-2-改变函数内部-this-指向"><a href="#1-2-改变函数内部-this-指向" class="headerlink" title="1.2 改变函数内部 this 指向"></a>1.2 改变函数内部 this 指向</h3><h4 id="1-2-1-call-方法"><a href="#1-2-1-call-方法" class="headerlink" title="1.2.1 call 方法"></a>1.2.1 call 方法</h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p>
<p>应用场景: 经常做继承.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'andy'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.call(o, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行结果为:</p>
<h4 id="1-2-2-apply-方法"><a href="#1-2-2-apply-方法" class="headerlink" title="1.2.2 apply 方法"></a>1.2.2 apply 方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p>
<p>应用场景: 经常跟数组有关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'andy'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line">fn() <span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.apply(o, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-bind-方法"><a href="#1-2-3-bind-方法" class="headerlink" title="1.2.3 bind 方法"></a>1.2.3 bind 方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部 this 指向,返回的是原函数改变 this 之后产生的新函数</p>
<p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind</p>
<p>应用场景:不调用函数,但是还想改变 this 指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'andy'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn.bind(o, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f() <span class="comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-4-call、apply、bind-三者的异同"><a href="#1-2-4-call、apply、bind-三者的异同" class="headerlink" title="1.2.4 call、apply、bind 三者的异同"></a>1.2.4 call、apply、bind 三者的异同</h4><ul>
<li>共同点 : 都可以改变 this 指向</li>
<li>不同点:<ul>
<li>call 和 apply 会调用函数, 并且改变函数内部 this 指向.</li>
<li>call 和 apply 传递的参数不一样,call 传递参数使用逗号隔开,apply 使用数组传递</li>
<li>bind 不会调用函数, 可以改变函数内部 this 指向.</li>
</ul>
</li>
</ul>
<ul>
<li>应用场景<ol>
<li>call 经常做继承.</li>
<li>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li>
<li>bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向.</li>
</ol>
</li>
</ul>
<h2 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2.闭包"></a>2.闭包</h2><h3 id="2-1-变量的作用域"><a href="#2-1-变量的作用域" class="headerlink" title="2.1 变量的作用域"></a>2.1 变量的作用域</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p>
<ol>
<li>函数内部可以使用全局变量。</li>
<li>函数外部不可以使用局部变量。</li>
<li>当函数执行完毕，本作用域内的局部变量会销毁。</li>
</ol>
<h3 id="2-2-什么是闭包"><a href="#2-2-什么是闭包" class="headerlink" title="2.2 什么是闭包"></a>2.2 什么是闭包</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。</p>
<h3 id="2-3-闭包的作用"><a href="#2-3-闭包的作用" class="headerlink" title="2.3 闭包的作用"></a>2.3 闭包的作用</h3><p>作用：延伸变量的作用范围。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fun</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h3 id="2-4-闭包的案例"><a href="#2-4-闭包的案例" class="headerlink" title="2.4 闭包的案例"></a>2.4 闭包的案例</h3><ol>
<li>利用闭包的方式得到当前 li 的索引号</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line">  <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">  ;(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>闭包应用-3 秒钟之后,打印所有 li 元素的内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  ;(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(lis[i].innerHTML)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>闭包应用-计算打车价格</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*需求分析</span></span><br><span class="line"><span class="comment">打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格</span></span><br><span class="line"><span class="comment">如果有拥堵情况,总价格多收取10块钱拥堵费*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">13</span> <span class="comment">// 起步价  局部变量</span></span><br><span class="line">  <span class="keyword">var</span> total = <span class="number">0</span> <span class="comment">// 总价  局部变量</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 正常的总价</span></span><br><span class="line">    price: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        total = start</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        total = start + (n - <span class="number">3</span>) * <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> total</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拥堵之后的费用</span></span><br><span class="line">    yd: <span class="function"><span class="keyword">function</span> (<span class="params">flag</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> flag ? total + <span class="number">10</span> : total</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(car.price(<span class="number">5</span>)) <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log(car.yd(<span class="literal">true</span>)) <span class="comment">// 33</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-案例"><a href="#2-5-案例" class="headerlink" title="2.5 案例"></a>2.5 案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line">   <span class="keyword">var</span> object = &#123;</span><br><span class="line">     name: <span class="string">"My Object"</span>,</span><br><span class="line">     getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</span><br><span class="line">  <span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/05/25/git/</url>
    <content><![CDATA[<h2 id="1-Git-基础"><a href="#1-Git-基础" class="headerlink" title="1. Git 基础"></a>1. Git 基础</h2><h3 id="1-1-版本管理"><a href="#1-1-版本管理" class="headerlink" title="1.1 版本管理"></a>1.1 版本管理</h3><h4 id="1-1-1-什么是版本管理"><a href="#1-1-1-什么是版本管理" class="headerlink" title="1.1.1 什么是版本管理"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p>
<a id="more"></a>

<p><img src="assets/01.png" alt=""></p>
<h4 id="1-1-2-人为维护文档版本的问题"><a href="#1-1-2-人为维护文档版本的问题" class="headerlink" title="1.1.2 人为维护文档版本的问题"></a>1.1.2 人为维护文档版本的问题</h4><ol>
<li><p>文档数量多且命名不清晰导致文档版本混乱</p>
</li>
<li><p>每次编辑文档需要复制，不方便</p>
</li>
<li><p>多人同时编辑同一个文档，容易产生覆盖</p>
</li>
</ol>
<p><img src="assets/04.png" alt=""></p>
<h3 id="1-2-Git-是什么"><a href="#1-2-Git-是什么" class="headerlink" title="1.2 Git 是什么"></a>1.2 Git 是什么</h3><p>Git 是一个版本管理控制系统（缩写 VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。</p>
<p><img src="assets/19.png" alt=""></p>
<h3 id="1-3-Git-安装"><a href="#1-3-Git-安装" class="headerlink" title="1.3 Git 安装"></a>1.3 Git 安装</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a></p>
<p>在安装的过程中，所有选项使用默认值即可。</p>
<p>Git 可以安装在哪些操作系统上？</p>
<p>Linux</p>
<p>macOS</p>
<p>Solaris</p>
<p>Windows</p>
<p>Raspberry Pi</p>
<h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table>
<thead>
<tr>
<th>git 仓库</th>
<th>暂存区</th>
<th>工作目录</th>
</tr>
</thead>
<tbody><tr>
<td>用于存放提交记录</td>
<td>临时存放被修改文件</td>
<td>被 Git 管理的项目目录</td>
</tr>
</tbody></table>
<p><img src="assets/05.png" alt=""></p>
<h3 id="1-5-Git-的使用"><a href="#1-5-Git-的使用" class="headerlink" title="1.5 Git 的使用"></a>1.5 Git 的使用</h3><h4 id="1-5-1-Git-使用前配置"><a href="#1-5-1-Git-使用前配置" class="headerlink" title="1.5.1 Git 使用前配置"></a>1.5.1 Git 使用前配置</h4><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>
<ol>
<li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li>
<li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code></li>
<li>查看 git 配置信息：<code>git config --list</code></li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li><p>如果要对配置信息进行修改，重复上述命令即可。</p>
</li>
<li><p>配置只需要执行一次。</p>
</li>
</ol>
<h4 id="1-5-2-提交步骤"><a href="#1-5-2-提交步骤" class="headerlink" title="1.5.2 提交步骤"></a>1.5.2 提交步骤</h4><ol>
<li><code>git init</code> 初始化 git 仓库</li>
<li><code>git status</code> 查看文件状态</li>
<li><code>git add 文件列表</code> 追踪文件</li>
<li><code>git commit -m 提交信息</code> 向仓库中提交代码</li>
<li><code>git log</code> 查看提交记录</li>
</ol>
<h4 id="1-5-3-撤销"><a href="#1-5-3-撤销" class="headerlink" title="1.5.3 撤销"></a>1.5.3 撤销</h4><ul>
<li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p>
</li>
<li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p>
</li>
<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code></p>
</li>
</ul>
<p><img src="assets/07.png" alt=""></p>
<h2 id="2-Git-进阶"><a href="#2-Git-进阶" class="headerlink" title="2. Git 进阶"></a>2. Git 进阶</h2><h3 id="2-1-分支"><a href="#2-1-分支" class="headerlink" title="2.1 分支"></a>2.1 分支</h3><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p>
<p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p>
<p><img src="assets/08.png" alt=""></p>
<h4 id="2-1-1-分支细分"><a href="#2-1-1-分支细分" class="headerlink" title="2.1.1 分支细分"></a>2.1.1 分支细分</h4><ol>
<li>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</li>
</ol>
<p><img src="assets/06.png" alt=""></p>
<ol start="2">
<li>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</li>
</ol>
<p><img src="assets/09.png" alt=""></p>
<ol start="3">
<li>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</li>
</ol>
<p><img src="assets/10.png" alt=""></p>
<p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>
<h4 id="2-1-2-分支命令"><a href="#2-1-2-分支命令" class="headerlink" title="2.1.2 分支命令"></a>2.1.2 分支命令</h4><ul>
<li><p><code>git branch</code> 查看分支</p>
</li>
<li><p><code>git branch 分支名称</code> 创建分支</p>
</li>
<li><p><code>git checkout 分支名称</code> 切换分支</p>
</li>
<li><p><code>git merge 来源分支</code> 合并分支</p>
</li>
<li><p><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</p>
</li>
</ul>
<h3 id="2-2-暂时保存更改"><a href="#2-2-暂时保存更改" class="headerlink" title="2.2 暂时保存更改"></a>2.2 暂时保存更改</h3><p>在 git 中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p>
<p>使用场景：分支临时切换</p>
<ul>
<li>存储临时改动：<code>git stash</code></li>
<li>恢复改动：<code>git stash pop</code></li>
</ul>
<h2 id="3-Github"><a href="#3-Github" class="headerlink" title="3. Github"></a>3. Github</h2><p>在版本控制系统中，大约 90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。</p>
<p>只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。</p>
<h3 id="3-1-注册"><a href="#3-1-注册" class="headerlink" title="3.1 注册"></a>3.1 注册</h3><ol>
<li><p>访问<a href="https://github.com/" target="_blank" rel="noopener">github</a>首页，点击 Sign up 连接。（注册）</p>
<p><img src="assets/11.png" alt=""></p>
</li>
<li><p>填写用户名、邮箱地址、GitHub 登陆密码</p>
<p><img src="assets/12.png" alt=""></p>
</li>
<li><p>选择计划</p>
<p><img src="assets/13.png" alt=""></p>
</li>
<li><p>填写 GitHub 问题</p>
<p><img src="assets/14.png" alt=""></p>
</li>
<li><p>验证邮箱</p>
<p><img src="assets/15.png" alt=""></p>
</li>
<li><p>GitHub 个人中心</p>
<p><img src="assets/16.png" alt=""></p>
</li>
</ol>
<h3 id="3-2-多人协作开发流程"><a href="#3-2-多人协作开发流程" class="headerlink" title="3.2 多人协作开发流程"></a>3.2 多人协作开发流程</h3><ul>
<li>A 在自己的计算机中创建本地仓库</li>
<li>A 在 github 中创建远程仓库</li>
<li>A 将本地仓库推送到远程仓库</li>
<li>B 克隆远程仓库到本地进行开发</li>
<li>B 将本地仓库中开发的内容推送到远程仓库</li>
<li>A 将远程仓库中的最新内容拉去到本地</li>
</ul>
<p><img src="assets/20.png" alt=""></p>
<p><img src="assets/21.png" alt=""></p>
<h3 id="3-3-创建仓库"><a href="#3-3-创建仓库" class="headerlink" title="3.3 创建仓库"></a>3.3 创建仓库</h3><ol>
<li><p>填写仓库基本信息</p>
<p><img src="assets/17.png" alt=""></p>
</li>
<li><p>将本地仓库推送到远程仓库</p>
<p><img src="assets/18.png" alt=""></p>
<ol>
<li><p>git push 远程仓库地址 分支名称</p>
</li>
<li><p>git push 远程仓库地址别名 分支名称</p>
</li>
<li><p>git push -u 远程仓库地址别名 分支名称</p>
<p>-u 记住推送地址及分支，下次推送只需要输入 git push 即可</p>
</li>
<li><p>git remote add 远程仓库地址别名 远程仓库地址</p>
</li>
</ol>
</li>
</ol>
<h3 id="3-4-拉取操作"><a href="#3-4-拉取操作" class="headerlink" title="3.4 拉取操作"></a>3.4 拉取操作</h3><h4 id="3-4-1-克隆仓库"><a href="#3-4-1-克隆仓库" class="headerlink" title="3.4.1 克隆仓库"></a>3.4.1 克隆仓库</h4><p>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></p>
<h4 id="3-4-2-拉取远程仓库中最新的版本"><a href="#3-4-2-拉取远程仓库中最新的版本" class="headerlink" title="3.4.2 拉取远程仓库中最新的版本"></a>3.4.2 拉取远程仓库中最新的版本</h4><p>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></p>
<h3 id="3-5-解决冲突"><a href="#3-5-解决冲突" class="headerlink" title="3.5 解决冲突"></a>3.5 解决冲突</h3><p>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</p>
<h3 id="3-6-跨团队协作"><a href="#3-6-跨团队协作" class="headerlink" title="3.6 跨团队协作"></a>3.6 跨团队协作</h3><ol>
<li>程序员 C fork 仓库</li>
<li>程序员 C 将仓库克隆在本地进行修改</li>
<li>程序员 C 将仓库推送到远程</li>
<li>程序员 C 发起 pull reqest</li>
<li>原仓库作者审核</li>
<li>原仓库作者合并代码</li>
</ol>
<h3 id="3-7-ssh-免登陆"><a href="#3-7-ssh-免登陆" class="headerlink" title="3.7 ssh 免登陆"></a>3.7 ssh 免登陆</h3><p><img src="assets/22.png" alt=""></p>
<p>生成秘钥：<code>ssh-keygen</code></p>
<p>秘钥存储目录：C:\Users\用户\.ssh</p>
<p>公钥名称：id_rsa.pub</p>
<p>私钥名称：id_rsa</p>
<p><img src="assets/23.png" alt=""></p>
<p><img src="assets/24.png" alt=""></p>
<h3 id="3-8-GIT-忽略清单"><a href="#3-8-GIT-忽略清单" class="headerlink" title="3.8 GIT 忽略清单"></a>3.8 GIT 忽略清单</h3><p>将不需要被 git 管理的文件名字添加到此文件中，在执行 git 命令的时候，git 就会忽略这些文件。</p>
<p>git 忽略清单文件名称：<strong>.gitignore</strong></p>
<p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript面向对象</title>
    <url>/2020/06/06/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h2><h3 id="1-1面向过程"><a href="#1-1面向过程" class="headerlink" title="1.1面向过程"></a>1.1面向过程</h3><ul>
<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li>
</ul>
<h3 id="1-2面向对象"><a href="#1-2面向对象" class="headerlink" title="1.2面向对象"></a>1.2面向对象</h3><ul>
<li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li>
</ul>
<a id="more"></a>

<h3 id="1-3面向过程与面向对象对比"><a href="#1-3面向过程与面向对象对比" class="headerlink" title="1.3面向过程与面向对象对比"></a>1.3面向过程与面向对象对比</h3><table>
<thead>
<tr>
<th></th>
<th>面向过程</th>
<th>面向对象</th>
</tr>
</thead>
<tbody><tr>
<td>优点</td>
<td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td>
<td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td>
</tr>
<tr>
<td>缺点</td>
<td>不易维护、不易复用、不易扩展</td>
<td>性能比面向过程低</td>
</tr>
</tbody></table>
<h2 id="2-对象与类"><a href="#2-对象与类" class="headerlink" title="2.对象与类"></a>2.对象与类</h2><h3 id="2-1对象"><a href="#2-1对象" class="headerlink" title="2.1对象"></a>2.1对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p>
<ul>
<li>属性：事物的特征，在对象中用属性来表示（常用名词）</li>
<li>方法：事物的行为，在对象中用方法来表示（常用动词）</li>
</ul>
<h4 id="2-1-1创建对象"><a href="#2-1-1创建对象" class="headerlink" title="2.1.1创建对象"></a>2.1.1创建对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下代码是对对象的复习</span></span><br><span class="line"><span class="comment">//字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> ldh = &#123;</span><br><span class="line">    name: <span class="string">'刘德华'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数创建对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>)<span class="comment">//实例化对象</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure>

<p>如上两行代码运行结果为:<img src="images/img3.png" alt=""></p>
<h3 id="2-2类"><a href="#2-2类" class="headerlink" title="2.2类"></a>2.2类</h3><ul>
<li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</li>
</ul>
<h4 id="2-2-1创建类"><a href="#2-2-1创建类" class="headerlink" title="2.2.1创建类"></a>2.2.1创建类</h4><ol>
<li>语法:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤1 使用class关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span> </span>&#123;</span><br><span class="line">  <span class="comment">// class body</span></span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> name();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line">  <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure>

<p>以上代码运行结果: </p>
<p><img src="images/img4.png" alt=""></p>
<p>通过结果我们可以看出,运行结果和使用构造函数方式一样</p>
<h4 id="2-2-2类创建添加属性和方法"><a href="#2-2-2类创建添加属性和方法" class="headerlink" title="2.2.2类创建添加属性和方法"></a>2.2.2类创建添加属性和方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 创建类 class  创建一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(uname, age) &#123;</span><br><span class="line">      <span class="keyword">this</span>.uname = uname;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span></span><br><span class="line">    sing(song) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.uname + <span class="string">'唱'</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh); <span class="comment">// Star &#123;uname: "刘德华", age: 18&#125;</span></span><br><span class="line">ldh.sing(<span class="string">'冰雨'</span>); <span class="comment">// 刘德华唱冰雨</span></span><br></pre></td></tr></table></figure>

<p> 以上代码运行结果:</p>
<p><img src="images/img5.png" alt=""></p>
<p><strong>注意哟:</strong></p>
<ol>
<li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li>
<li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li>
<li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li>
<li>多个函数方法之间不需要添加逗号分隔</li>
<li>生成实例 new 不能省略</li>
<li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li>
</ol>
<h4 id="2-2-3类的继承"><a href="#2-2-3类的继承" class="headerlink" title="2.2.3类的继承"></a>2.2.3类的继承</h4><ol>
<li>语法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;   </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Son</span>  <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(surname) &#123;</span><br><span class="line">        <span class="keyword">this</span>.surname= surname;</span><br><span class="line">      &#125;</span><br><span class="line">      say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'你的姓是'</span> + <span class="keyword">this</span>.surname);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao= <span class="keyword">new</span> Son(<span class="string">'刘'</span>);</span><br><span class="line">damao.say();      <span class="comment">//结果为 你的姓是刘</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行结果:</p>
<p><img src="images/img6.png" alt=""></p>
<ul>
<li><p>子类使用super关键字访问父类的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="keyword">this</span>.x = x;</span><br><span class="line">   <span class="keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.x + <span class="keyword">this</span>.y);</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//子元素继承父类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   		 <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    		<span class="keyword">super</span>(x, y); <span class="comment">//使用super调用了父类中的构造函数</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    son.sum(); <span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> </p>
<ol>
<li><p>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p>
</li>
<li><p>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p>
</li>
<li><p>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 父类有加法方法</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="keyword">this</span>.x = x;</span><br><span class="line">   <span class="keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   sum() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.x + <span class="keyword">this</span>.y);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">   <span class="comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span></span><br><span class="line">   <span class="keyword">super</span>(x, y);</span><br><span class="line">   <span class="keyword">this</span>.x = x;</span><br><span class="line">   <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  subtract() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x - <span class="keyword">this</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">son.subtract(); <span class="comment">//2</span></span><br><span class="line">son.sum();<span class="comment">//8</span></span><br></pre></td></tr></table></figure>
<p>以上代码运行结果为:</p>
<p><img src="images/img7.png" alt=""></p>
</li>
<li><p>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</p>
<ol>
<li>constructor中的this指向的是new出来的实例对象 </li>
<li>自定义的方法,一般也指向的new出来的实例对象</li>
<li>绑定事件之后this指向的就是触发事件的事件源</li>
</ol>
</li>
<li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象<img src="images/img2.png" alt=""></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="images/img1.png" alt=""></h2></li>
</ol>
</li>
</ul>
<h2 id="3-面向对象版tab-栏切换"><a href="#3-面向对象版tab-栏切换" class="headerlink" title="3.面向对象版tab 栏切换"></a>3.面向对象版tab 栏切换</h2><h3 id="3-1功能需求"><a href="#3-1功能需求" class="headerlink" title="3.1功能需求"></a>3.1功能需求</h3><ol>
<li>点击 tab栏,可以切换效果.</li>
<li>点击 + 号, 可以添加 tab 项和内容项.</li>
<li>点击 x 号, 可以删除当前的tab项和内容项.</li>
<li>双击tab项文字或者内容项文字可以修改里面的文字内容</li>
</ol>
<h3 id="3-2案例准备"><a href="#3-2案例准备" class="headerlink" title="3.2案例准备"></a>3.2案例准备</h3><ol>
<li>获取到标题元素</li>
<li>获取到内容元素</li>
<li>获取到删除的小按钮 x号</li>
<li>新建js文件,定义类,添加需要的属性方法(切换,删除,增加,修改)</li>
<li>时刻注意this的指向问题</li>
</ol>
<h3 id="3-3切换"><a href="#3-3切换" class="headerlink" title="3.3切换"></a>3.3切换</h3><ul>
<li><p>为获取到的标题绑定点击事件,展示对应的内容区域,存储对应的索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.lis[i].index = i;</span><br><span class="line"><span class="keyword">this</span>.lis[i].onclick = <span class="keyword">this</span>.toggleTab;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用排他,实现只有一个元素的显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toggleTab() &#123;</span><br><span class="line">  <span class="comment">//将所有的标题与内容类样式全部移除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.lis.length; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.lis[i].className = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.sections[i].className = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//为当前的标题添加激活样式</span></span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">'liactive'</span>;</span><br><span class="line">   <span class="comment">//为当前的内容添加激活样式</span></span><br><span class="line">    that.sections[<span class="keyword">this</span>.index].className = <span class="string">'conactive'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4添加"><a href="#3-4添加" class="headerlink" title="3.4添加"></a>3.4添加</h3><ul>
<li><p>为添加按钮+ 绑定点击事件 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.add.onclick = <span class="keyword">this</span>.addTab;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现标题与内容的添加,做好排他处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addTab() &#123;</span><br><span class="line">    that.clearClass();</span><br><span class="line">    <span class="comment">// (1) 创建li元素和section元素 </span></span><br><span class="line">    <span class="keyword">var</span> random = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">var</span> li = <span class="string">'&lt;li class="liactive"&gt;&lt;span&gt;新选项卡&lt;/span&gt;&lt;span class="iconfont icon-guanbi"&gt;				&lt;/span&gt;&lt;/li&gt;'</span>;</span><br><span class="line">    <span class="keyword">var</span> section = <span class="string">'&lt;section class="conactive"&gt;测试 '</span> + random + <span class="string">'&lt;/section&gt;'</span>;</span><br><span class="line">    <span class="comment">// (2) 把这两个元素追加到对应的父元素里面</span></span><br><span class="line">    that.ul.insertAdjacentHTML(<span class="string">'beforeend'</span>, li);</span><br><span class="line">    that.fsection.insertAdjacentHTML(<span class="string">'beforeend'</span>, section);</span><br><span class="line">    that.init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5删除"><a href="#3-5删除" class="headerlink" title="3.5删除"></a>3.5删除</h3><ul>
<li><p>为元素的删除按钮x绑定点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.remove[i].onclick = <span class="keyword">this</span>.removeTab;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到点击的删除按钮的所在的父元素的所有,删除对应的标题与内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeTab(e) &#123;</span><br><span class="line">    e.stopPropagation(); <span class="comment">// 阻止冒泡 防止触发li 的切换点击事件</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.parentNode.index;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="comment">// 根据索引号删除对应的li 和section   remove()方法可以直接删除指定的元素</span></span><br><span class="line">    that.lis[index].remove();</span><br><span class="line">    that.sections[index].remove();</span><br><span class="line">    that.init();</span><br><span class="line">    <span class="comment">// 当我们删除的不是选中状态的li 的时候,原来的选中状态li保持不变</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.querySelector(<span class="string">'.liactive'</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 当我们删除了选中状态的这个li 的时候, 让它的前一个li 处于选定状态</span></span><br><span class="line">    index--;</span><br><span class="line">    <span class="comment">// 手动调用我们的点击事件  不需要鼠标触发</span></span><br><span class="line">    that.lis[index] &amp;&amp; that.lis[index].click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6编辑"><a href="#3-6编辑" class="headerlink" title="3.6编辑"></a>3.6编辑</h3><ul>
<li><p>为元素(标题与内容)绑定双击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.spans[i].ondblclick = <span class="keyword">this</span>.editTab;</span><br><span class="line"><span class="keyword">this</span>.sections[i].ondblclick = <span class="keyword">this</span>.editTab;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在双击事件处理文本选中状态,修改内部DOM节点,实现新旧value值的传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">editTab() &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">this</span>.innerHTML;</span><br><span class="line">    <span class="comment">// 双击禁止选定文字</span></span><br><span class="line">    <span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : 				    <span class="built_in">document</span>.selection.empty();</span><br><span class="line">    <span class="comment">// alert(11);</span></span><br><span class="line">      <span class="keyword">this</span>.innerHTML = <span class="string">'&lt;input type="text" /&gt;'</span>;</span><br><span class="line">      <span class="keyword">var</span> input = <span class="keyword">this</span>.children[<span class="number">0</span>];</span><br><span class="line">      input.value = str;</span><br><span class="line">      input.select(); <span class="comment">// 文本框里面的文字处于选定状态</span></span><br><span class="line">      <span class="comment">// 当我们离开文本框就把文本框里面的值给span </span></span><br><span class="line">      input.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.parentNode.innerHTML = <span class="keyword">this</span>.value;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 按下回车也可以把文本框里面的值给span</span></span><br><span class="line">      input.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="comment">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span></span><br><span class="line">      <span class="keyword">this</span>.blur();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/05/30/ES6/</url>
    <content><![CDATA[<h1 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h1><h2 id="ES6-相关概念（★★）"><a href="#ES6-相关概念（★★）" class="headerlink" title="ES6 相关概念（★★）"></a>ES6 相关概念（★★）</h2><h3 id="什么是-ES6"><a href="#什么是-ES6" class="headerlink" title="什么是 ES6"></a>什么是 ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p>
<a id="more"></a>

<h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript 语言本身也有一些令人不满意的地方。</p>
<ul>
<li>变量提升特性增加了程序运行时的不可预测性</li>
<li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li>
</ul>
<h2 id="ES6-新增语法"><a href="#ES6-新增语法" class="headerlink" title="ES6 新增语法"></a>ES6 新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6 中新增了用于声明变量的关键字</p>
<h4 id="let-声明的变量只在所处于的块级有效"><a href="#let-声明的变量只在所处于的块级有效" class="headerlink" title="let 声明的变量只在所处于的块级有效"></a>let 声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>使用 let 关键字声明的变量才具有块级作用域，使用 var 声明的变量不具备块级作用域特性。</p>
<h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用 let 声明的变量会绑定在这个块级作用域，不会受外界的影响</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">'abc'</span></span><br><span class="line">  <span class="keyword">let</span> tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]()</span><br><span class="line">arr[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure>

<p><strong>经典面试题图解：</strong>此题的关键点在于变量 i 是全局的，函数执行时输出的都是全局作用域下的 i 值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]()</span><br><span class="line">arr[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure>

<p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的 i 值.</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>let 关键字就是用来声明变量的</li>
<li>使用 let 关键字声明的变量具有块级作用域</li>
<li>在一个大括号中 使用 let 关键字声明的变量才具有块级作用域 var 关键字是不具备这个特点的</li>
<li>防止循环变量变成全局变量</li>
<li>使用 let 关键字声明的变量没有变量提升</li>
<li>使用 let 关键字声明的变量具有暂时性死区特性</li>
</ul>
<h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p>
<h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line">PI = <span class="number">100</span> <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">'a'</span></span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(ary) <span class="comment">// ['a', 'b'];</span></span><br><span class="line">ary = [<span class="string">'a'</span>, <span class="string">'b'</span>] <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>const 声明的变量是一个常量</li>
<li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li>
<li>声明 const 时候必须要给定值</li>
</ul>
<h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul>
<li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li>
<li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li>
<li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li>
</ul>
<p><img src="D:/github/blog/blog/source/_posts/images/var&let&const%E5%8C%BA%E5%88%AB.png" alt=""></p>
<h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6 中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">'zhangsan'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// 'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge &#125; = person <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="built_in">console</span>.log(myName) <span class="comment">// 'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul>
<li>解构赋值就是把数据结构分解，然后给变量进行赋值</li>
<li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为 undefined</li>
<li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li>
<li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li>
</ul>
<h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6 中新增的定义函数的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure>

<p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2</span><br></pre></td></tr></table></figure>

<p>如果形参只有一个，可以省略小括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">v</span>) =&gt;</span> v</span><br></pre></td></tr></table></figure>

<p>箭头函数不绑定 this 关键字，箭头函数中的 this，指向的是函数定义位置的上下文 this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'张三'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this 指向 是obj对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> resFn = fn.call(obj)</span><br><span class="line">resFn()</span><br></pre></td></tr></table></figure>

<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul>
<li>箭头函数中不绑定 this，箭头函数中的 this 指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的 this 指向谁，它就指向谁</li>
<li>箭头函数的优点在于解决了 this 执行环境所造成的一些问题。比如：解决了匿名函数 this 指向的问题（匿名函数的执行环境具有全局性），包括 setTimeout 和 setInterval 中使用 this 所造成的问题</li>
</ul>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  say: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.say() <span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(first) <span class="comment">// 10</span></span><br><span class="line">  <span class="built_in">console</span>.log(args) <span class="comment">// [20, 30]</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">'wangwu'</span>, <span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>]</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students</span><br><span class="line"><span class="built_in">console</span>.log(s1) <span class="comment">// 'wangwu'</span></span><br><span class="line"><span class="built_in">console</span>.log(s2) <span class="comment">// ['zhangsan', 'lisi']</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1, ...ary2]</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">ary1.push(...ary2)</span><br></pre></td></tr></table></figure>

<h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line">oDivs = [...oDivs]</span><br></pre></td></tr></table></figure>

<h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike) <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>

<p>方法还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="number">2</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, (item) =&gt; item * <span class="number">2</span>) <span class="comment">//[2,4]</span></span><br></pre></td></tr></table></figure>

<p>注意：如果是对象，那么属性需要写对应的索引</p>
<h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'李四'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>) <span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  .includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6 新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span></span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'张三'</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span> <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  sex: <span class="string">'男'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt; `</span></span><br></pre></td></tr></table></figure>

<h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'哈哈哈哈 追不到我吧 我就是这么强大'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span></span><br><span class="line"><span class="built_in">console</span>.log(greet) <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello world!'</span></span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">str.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat 方法表示将原字符串重复 n 次，返回一个新字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set 本身是一个构造函数，用来生成 Set 数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br></pre></td></tr></table></figure>

<p>Set 函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 4]) //&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>) <span class="comment">// 向 set 结构中添加值</span></span><br><span class="line">s.delete(<span class="number">2</span>) <span class="comment">// 删除 set 结构中的2值</span></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值</span></span><br><span class="line">s.clear() <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">s.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2020/06/06/Vuex/</url>
    <content><![CDATA[<h3 id="1-Vuex概述"><a href="#1-Vuex概述" class="headerlink" title="1.Vuex概述"></a>1.Vuex概述</h3><p>Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享</p>
<p>使用Vuex管理数据的好处：<br>A.能够在vuex中集中管理共享的数据，便于开发和后期进行维护<br>B.能够高效的实现组件之间的数据共享，提高开发效率<br>C.存储在vuex中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</p>
<a id="more"></a>

<h3 id="2-Vuex的基本使用"><a href="#2-Vuex的基本使用" class="headerlink" title="2.Vuex的基本使用"></a>2.Vuex的基本使用</h3><p>创建带有vuex的vue项目，打开终端，输入命令：vue ui<br>当项目仪表盘打开之后，我们点击页面左上角的项目管理下拉列表，再点击Vue项目管理器<br>点击创建项目，如下图所示<br>第一步，设置项目名称和包管理器<br>第二步，设置手动配置项目<br>第三步，设置功能项<br>第四步，创建项目</p>
<h3 id="3-使用Vuex完成计数器案例"><a href="#3-使用Vuex完成计数器案例" class="headerlink" title="3.使用Vuex完成计数器案例"></a>3.使用Vuex完成计数器案例</h3><p>打开刚刚创建的vuex项目，找到src目录中的App.vue组件，将代码重新编写如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-addition&gt;&lt;&#x2F;my-addition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;----------------------------------------&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;my-subtraction&gt;&lt;&#x2F;my-subtraction&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Addition from &#39;.&#x2F;components&#x2F;Addition.vue&#39;</span><br><span class="line">import Subtraction from &#39;.&#x2F;components&#x2F;Subtraction.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#39;my-subtraction&#39;: Subtraction,</span><br><span class="line">    &#39;my-addition&#39;: Addition</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>在components文件夹中创建Addition.vue组件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;button&gt;+1&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>在components文件夹中创建Subtraction.vue组件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;button&gt;-1&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>最后在项目根目录(与src平级)中创建 .prettierrc 文件，编写代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;semi&quot;:false,</span><br><span class="line">    &quot;singleQuote&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Vuex中的核心特性"><a href="#4-Vuex中的核心特性" class="headerlink" title="4.Vuex中的核心特性"></a>4.Vuex中的核心特性</h3><h4 id="A-State"><a href="#A-State" class="headerlink" title="A.State"></a>A.State</h4><p>​    State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储<br>​    例如，打开项目中的store.js文件，在State对象中可以添加我们要共享的数据，如：count:0<br>​    </p>
<pre><code>在组件中访问State的方式：
1).this.$store.state.全局数据名称  如：this.$store.state.count
2).先按需导入mapState函数： import { mapState } from &apos;vuex&apos;
然后数据映射为计算属性： computed:{ ...mapState([&apos;全局数据名称&apos;]) }</code></pre><h4 id="B-Mutation"><a href="#B-Mutation" class="headerlink" title="B.Mutation"></a>B.Mutation</h4><p>Mutation用于修改变更$store中的数据<br>使用方式：<br>打开store.js文件，在mutations中添加代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    add(state,step)&#123;</span><br><span class="line">      &#x2F;&#x2F;第一个形参永远都是state也就是$state对象</span><br><span class="line">      &#x2F;&#x2F;第二个形参是调用add时传递的参数</span><br><span class="line">      state.count+&#x3D;step;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后在Addition.vue中给按钮添加事件代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;Add&quot;&gt;+1&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  Add()&#123;</span><br><span class="line">    &#x2F;&#x2F;使用commit函数调用mutations中的对应函数，</span><br><span class="line">    &#x2F;&#x2F;第一个参数就是我们要调用的mutations中的函数名</span><br><span class="line">    &#x2F;&#x2F;第二个参数就是传递给add函数的参数</span><br><span class="line">    this.$store.commit(&#39;add&#39;,10)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用mutations的第二种方式：<br>import { mapMutations } from ‘vuex’</p>
<p>methods:{<br>  …mapMutations([‘add’])<br>}<br>如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapState,mapMutations &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      &#x2F;&#x2F;获得mapMutations映射的sub函数</span><br><span class="line">      ...mapMutations([&#39;sub&#39;]),</span><br><span class="line">      &#x2F;&#x2F;当点击按钮时触发Sub函数</span><br><span class="line">      Sub()&#123;</span><br><span class="line">          &#x2F;&#x2F;调用sub函数完成对数据的操作</span><br><span class="line">          this.sub(10);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      ...mapState([&#39;count&#39;])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="C-Action"><a href="#C-Action" class="headerlink" title="C.Action"></a>C.Action</h4><p>在mutations中不能编写异步的代码，会导致vue调试器的显示出错。<br>在vuex中我们可以使用Action来执行异步操作。<br>操作步骤如下：<br>打开store.js文件，修改Action，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  addAsync(context,step)&#123;</span><br><span class="line">    setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">      context.commit(&#39;add&#39;,step);</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在Addition.vue中给按钮添加事件代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;AddAsync&quot;&gt;...+1&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  AddAsync()&#123;</span><br><span class="line">    this.$store.dispatch(&#39;addAsync&#39;,5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式：<br>import { mapActions } from ‘vuex’</p>
<p>methods:{<br>  …mapMutations([‘subAsync’])<br>}<br>如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapState,mapMutations,mapActions &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      &#x2F;&#x2F;获得mapMutations映射的sub函数</span><br><span class="line">      ...mapMutations([&#39;sub&#39;]),</span><br><span class="line">      &#x2F;&#x2F;当点击按钮时触发Sub函数</span><br><span class="line">      Sub()&#123;</span><br><span class="line">          &#x2F;&#x2F;调用sub函数完成对数据的操作</span><br><span class="line">          this.sub(10);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;获得mapActions映射的addAsync函数</span><br><span class="line">      ...mapActions([&#39;subAsync&#39;]),</span><br><span class="line">      asyncSub()&#123;</span><br><span class="line">          this.subAsync(5);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      ...mapState([&#39;count&#39;])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="D-Getter"><a href="#D-Getter" class="headerlink" title="D.Getter"></a>D.Getter</h4><p>Getter用于对Store中的数据进行加工处理形成新的数据<br>它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化<br>打开store.js文件，添加getters，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  .......</span><br><span class="line">  getters:&#123;</span><br><span class="line">    &#x2F;&#x2F;添加了一个showNum的属性</span><br><span class="line">    showNum : state &#x3D;&gt;&#123;</span><br><span class="line">      return &#39;最新的count值为：&#39;+state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后打开Addition.vue中，添加插值表达式使用getters</p>
<h3></h3>

<p>或者也可以在Addition.vue中，导入mapGetters，并将之映射为计算属性<br>import { mapGetters } from ‘vuex’<br>computed:{<br>  …mapGetters([‘showNum’])<br>}</p>
<h3 id="5-vuex案例"><a href="#5-vuex案例" class="headerlink" title="5.vuex案例"></a>5.vuex案例</h3><h4 id="A-初始化案例"><a href="#A-初始化案例" class="headerlink" title="A.初始化案例"></a>A.初始化案例</h4><p>首先使用vue ui初始化一个使用vuex的案例<br>然后打开public文件夹，创建一个list.json文件，文件代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 0,</span><br><span class="line">        &quot;info&quot;: &quot;Racing car sprays burning fuel into crowd.&quot;,</span><br><span class="line">        &quot;done&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;info&quot;: &quot;Japanese princess to wed commoner.&quot;,</span><br><span class="line">        &quot;done&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 2,</span><br><span class="line">        &quot;info&quot;: &quot;Australian walks 100km after outback crash.&quot;,</span><br><span class="line">        &quot;done&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 3,</span><br><span class="line">        &quot;info&quot;: &quot;Man charged over missing wedding girl.&quot;,</span><br><span class="line">        &quot;done&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 4,</span><br><span class="line">        &quot;info&quot;: &quot;Los Angeles battles huge wildfires.&quot;,</span><br><span class="line">        &quot;done&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>再接着，打开main.js,添加store.js的引入，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import store from &#39;.&#x2F;store.js&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. 导入 ant-design-vue 组件库</span><br><span class="line">import Antd from &#39;ant-design-vue&#39;</span><br><span class="line">&#x2F;&#x2F; 2. 导入组件库的样式表</span><br><span class="line">import &#39;ant-design-vue&#x2F;dist&#x2F;antd.css&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">&#x2F;&#x2F; 3. 安装组件库</span><br><span class="line">Vue.use(Antd)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure>

<p>再接着打开store.js，添加axios请求json文件获取数据的代码，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    &#x2F;&#x2F;所有任务列表</span><br><span class="line">    list: [],</span><br><span class="line">    &#x2F;&#x2F;文本输入框中的值</span><br><span class="line">    inputValue: &#39;AAA&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    initList(state, list) &#123;</span><br><span class="line">      state.list &#x3D; list</span><br><span class="line">    &#125;,</span><br><span class="line">    setInputValue(state,value)&#123;</span><br><span class="line">      state.inputValue &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getList(context) &#123;</span><br><span class="line">      axios.get(&#39;&#x2F;list.json&#39;).then((&#123; data &#125;) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        context.commit(&#39;initList&#39;, data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>最后，代开App.vue文件，将store中的数据获取并展示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;a-input placeholder&#x3D;&quot;请输入任务&quot; class&#x3D;&quot;my_ipt&quot; :value&#x3D;&quot;inputValue&quot; @change&#x3D;&quot;handleInputChange&quot; &#x2F;&gt;</span><br><span class="line">    &lt;a-button type&#x3D;&quot;primary&quot;&gt;添加事项&lt;&#x2F;a-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a-list bordered :dataSource&#x3D;&quot;list&quot; class&#x3D;&quot;dt_list&quot;&gt;</span><br><span class="line">      &lt;a-list-item slot&#x3D;&quot;renderItem&quot; slot-scope&#x3D;&quot;item&quot;&gt;</span><br><span class="line">        &lt;!-- 复选框 --&gt;</span><br><span class="line">        &lt;a-checkbox :checked&#x3D;&quot;item.done&quot;&gt;&#123;&#123;item.info&#125;&#125;&lt;&#x2F;a-checkbox&gt;</span><br><span class="line">        &lt;!-- 删除链接 --&gt;</span><br><span class="line">        &lt;a slot&#x3D;&quot;actions&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;a-list-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- footer区域 --&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;footer&quot; class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">        &lt;!-- 未完成的任务个数 --&gt;</span><br><span class="line">        &lt;span&gt;0条剩余&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;!-- 操作按钮 --&gt;</span><br><span class="line">        &lt;a-button-group&gt;</span><br><span class="line">          &lt;a-button type&#x3D;&quot;primary&quot;&gt;全部&lt;&#x2F;a-button&gt;</span><br><span class="line">          &lt;a-button&gt;未完成&lt;&#x2F;a-button&gt;</span><br><span class="line">          &lt;a-button&gt;已完成&lt;&#x2F;a-button&gt;</span><br><span class="line">        &lt;&#x2F;a-button-group&gt;</span><br><span class="line">        &lt;!-- 把已经完成的任务清空 --&gt;</span><br><span class="line">        &lt;a&gt;清除已完成&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;a-list&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;app&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; list:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(this.$store);</span><br><span class="line">    this.$store.dispatch(&#39;getList&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleInputChange(e)&#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(e.target.value)</span><br><span class="line">      this.$store.commit(&#39;setInputValue&#39;,e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    ...mapState([&#39;list&#39;,&#39;inputValue&#39;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my_ipt &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dt_list &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="B-完成添加事项"><a href="#B-完成添加事项" class="headerlink" title="B.完成添加事项"></a>B.完成添加事项</h4><p>首先，打开App.vue文件，给“添加事项”按钮绑定点击事件，编写处理函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;绑定事件</span><br><span class="line">&lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;addItemToList&quot;&gt;添加事项&lt;&#x2F;a-button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编写事件处理函数</span><br><span class="line">methods:&#123;</span><br><span class="line">    ......</span><br><span class="line">    addItemToList()&#123;</span><br><span class="line">      &#x2F;&#x2F;向列表中新增事项</span><br><span class="line">      if(this.inputValue.trim().length &lt;&#x3D; 0)&#123;</span><br><span class="line">        return this.$message.warning(&#39;文本框内容不能为空&#39;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.$store.commit(&#39;addItem&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后打开store.js编写addItem</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    &#x2F;&#x2F;所有任务列表</span><br><span class="line">    list: [],</span><br><span class="line">    &#x2F;&#x2F;文本输入框中的值</span><br><span class="line">    inputValue: &#39;AAA&#39;,</span><br><span class="line">    &#x2F;&#x2F;下一个id</span><br><span class="line">    nextId:5</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ........</span><br><span class="line">    &#x2F;&#x2F;添加列表项</span><br><span class="line">    addItem(state)&#123;</span><br><span class="line">      const obj &#x3D; &#123;</span><br><span class="line">        id :state.nextId,</span><br><span class="line">        info: state.inputValue.trim(),</span><br><span class="line">        done:false</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;将创建好的事项添加到数组list中</span><br><span class="line">      state.list.push(obj)</span><br><span class="line">      &#x2F;&#x2F;将nextId值自增</span><br><span class="line">      state.nextId++</span><br><span class="line">      state.inputValue &#x3D; &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="C-完成删除事项"><a href="#C-完成删除事项" class="headerlink" title="C.完成删除事项"></a>C.完成删除事项</h4><p>首先，打开App.vue文件，给“删除”按钮绑定点击事件，编写处理函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;绑定事件</span><br><span class="line">&lt;a slot&#x3D;&quot;actions&quot; @click&#x3D;&quot;removeItemById(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编写事件处理函数</span><br><span class="line">methods:&#123;</span><br><span class="line">    ......</span><br><span class="line">    removeItemById(id)&#123;</span><br><span class="line">      &#x2F;&#x2F;根据id删除事项</span><br><span class="line">      this.$store.commit(&#39;removeItem&#39;,id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后打开store.js编写addItem</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  ......</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ........</span><br><span class="line">    removeItem(state,id)&#123;</span><br><span class="line">      &#x2F;&#x2F;根据id删除事项数据</span><br><span class="line">      const index &#x3D; state.list.findIndex( x &#x3D;&gt; x.id &#x3D;&#x3D;&#x3D; id )</span><br><span class="line">      &#x2F;&#x2F; console.log(index);</span><br><span class="line">      if(index !&#x3D; -1) state.list.splice(index,1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="D-完成选中状态的改变"><a href="#D-完成选中状态的改变" class="headerlink" title="D.完成选中状态的改变"></a>D.完成选中状态的改变</h4><p>首先，打开App.vue文件，给“复选”按钮绑定点击事件，编写处理函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;绑定事件</span><br><span class="line">&lt;a-checkbox :checked&#x3D;&quot;item.done&quot; @change&#x3D;&quot;cbStateChanged(item.id,$event)&quot;&gt;&#123;&#123;item.info&#125;&#125;&lt;&#x2F;a-checkbox&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编写事件处理函数</span><br><span class="line">methods:&#123;</span><br><span class="line">    ......</span><br><span class="line">    cbStateChanged(id,e)&#123;</span><br><span class="line">      &#x2F;&#x2F;复选框状态改变时触发</span><br><span class="line">      const param &#x3D; &#123;</span><br><span class="line">        id:id,</span><br><span class="line">        status:e.target.checked</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;根据id更改事项状态</span><br><span class="line">      this.$store.commit(&#39;changeStatus&#39;,param)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后打开store.js编写addItem</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  ......</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ........</span><br><span class="line">    changeStatus(state,param)&#123;</span><br><span class="line">      &#x2F;&#x2F;根据id改变对应事项的状态</span><br><span class="line">      const index &#x3D; state.list.findIndex( x &#x3D;&gt; x.id &#x3D;&#x3D;&#x3D; param.id )</span><br><span class="line">      if(index !&#x3D; -1) state.list[index].done &#x3D; param.status</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="E-剩余项统计"><a href="#E-剩余项统计" class="headerlink" title="E.剩余项统计"></a>E.剩余项统计</h4><p>打开store.js，添加getters完成剩余项统计</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">  unDoneLength(state)&#123;</span><br><span class="line">    const temp &#x3D; state.list.filter( x &#x3D;&gt; x.done &#x3D;&#x3D;&#x3D; false )</span><br><span class="line">    console.log(temp)</span><br><span class="line">    return temp.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开App.vue，使用getters展示剩余项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用映射好的计算属性展示剩余项</span><br><span class="line">&lt;!-- 未完成的任务个数 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;unDoneLength&#125;&#125;条剩余&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导入getters</span><br><span class="line">import &#123; mapState,mapGetters &#125; from &#39;vuex&#39;</span><br><span class="line">&#x2F;&#x2F;映射</span><br><span class="line">computed:&#123;</span><br><span class="line">  ...mapState([&#39;list&#39;,&#39;inputValue&#39;]),</span><br><span class="line">  ...mapGetters([&#39;unDoneLength&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="F-清除完成事项"><a href="#F-清除完成事项" class="headerlink" title="F.清除完成事项"></a>F.清除完成事项</h4><p>首先，打开App.vue文件，给“清除已完成”按钮绑定点击事件，编写处理函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 把已经完成的任务清空 --&gt;</span><br><span class="line">&lt;a @click&#x3D;&quot;clean&quot;&gt;清除已完成&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编写事件处理函数</span><br><span class="line">methods:&#123;</span><br><span class="line">  ......</span><br><span class="line">  clean()&#123;</span><br><span class="line">    &#x2F;&#x2F;清除已经完成的事项</span><br><span class="line">    this.$store.commit(&#39;cleanDone&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开store.js编写addItem</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  ......</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ........</span><br><span class="line">    cleanDone(state)&#123;</span><br><span class="line">      state.list &#x3D; state.list.filter( x &#x3D;&gt; x.done &#x3D;&#x3D;&#x3D; false )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="G-点击选项卡切换事项"><a href="#G-点击选项卡切换事项" class="headerlink" title="G.点击选项卡切换事项"></a>G.点击选项卡切换事项</h4><p>打开App.vue，给“全部”，“未完成”，“已完成”三个选项卡绑定点击事件，编写处理函数<br>并将列表数据来源更改为一个getters。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a-list bordered :dataSource&#x3D;&quot;infoList&quot; class&#x3D;&quot;dt_list&quot;&gt;</span><br><span class="line">  ......</span><br><span class="line">  &lt;!-- 操作按钮 --&gt;</span><br><span class="line">  &lt;a-button-group&gt;</span><br><span class="line">    &lt;a-button :type&#x3D;&quot;viewKey &#x3D;&#x3D;&#x3D;&#39;all&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click&#x3D;&quot;changeList(&#39;all&#39;)&quot;&gt;全部&lt;&#x2F;a-button&gt;</span><br><span class="line">    &lt;a-button :type&#x3D;&quot;viewKey &#x3D;&#x3D;&#x3D;&#39;undone&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click&#x3D;&quot;changeList(&#39;undone&#39;)&quot;&gt;未完成&lt;&#x2F;a-button&gt;</span><br><span class="line">    &lt;a-button :type&#x3D;&quot;viewKey &#x3D;&#x3D;&#x3D;&#39;done&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click&#x3D;&quot;changeList(&#39;done&#39;)&quot;&gt;已完成&lt;&#x2F;a-button&gt;</span><br><span class="line">  &lt;&#x2F;a-button-group&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;&#x2F;a-list&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编写事件处理函数以及映射计算属性</span><br><span class="line">methods:&#123;</span><br><span class="line">  ......</span><br><span class="line">  changeList( key )&#123;</span><br><span class="line">    &#x2F;&#x2F;点击“全部”，“已完成”，“未完成”时触发</span><br><span class="line">    this.$store.commit(&#39;changeKey&#39;,key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">  ...mapState([&#39;list&#39;,&#39;inputValue&#39;,&#39;viewKey&#39;]),</span><br><span class="line">  ...mapGetters([&#39;unDoneLength&#39;,&#39;infoList&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开store.js，添加getters，mutations，state</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    ......</span><br><span class="line">    &#x2F;&#x2F;保存默认的选项卡值</span><br><span class="line">    viewKey:&#39;all&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ......</span><br><span class="line">    changeKey(state,key)&#123;</span><br><span class="line">      &#x2F;&#x2F;当用户点击“全部”，“已完成”，“未完成”选项卡时触发</span><br><span class="line">      state.viewKey &#x3D; key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ......</span><br><span class="line">  getters:&#123;</span><br><span class="line">    .......</span><br><span class="line">    infoList(state)&#123;</span><br><span class="line">      if(state.viewKey &#x3D;&#x3D;&#x3D; &#39;all&#39;)&#123;</span><br><span class="line">        return state.list</span><br><span class="line">      &#125;</span><br><span class="line">      if(state.viewKey &#x3D;&#x3D;&#x3D; &#39;undone&#39;)&#123;</span><br><span class="line">        return state.list.filter( x &#x3D;&gt; x.done &#x3D;&#x3D;&#x3D; false )</span><br><span class="line">      &#125;</span><br><span class="line">      if(state.viewKey &#x3D;&#x3D;&#x3D; &#39;done&#39;)&#123;</span><br><span class="line">        return state.list.filter( x &#x3D;&gt; x.done &#x3D;&#x3D;&#x3D; true )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Vue路由</title>
    <url>/2020/06/06/Vue%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="1-路由的概念"><a href="#1-路由的概念" class="headerlink" title="1.路由的概念"></a>1.路由的概念</h2><p>路由的本质就是一种对应关系，比如说我们在url地址中输入我们要访问的url地址之后，浏览器要去请求这个url地址对应的资源。<br>那么url地址和真实的资源之间就有一种对应的关系，就是路由。</p>
<p>路由分为前端路由和后端路由<br>1).后端路由是由服务器端进行实现，并完成资源的分发<br>2).前端路由是依靠hash值(锚链接)的变化进行实现 </p>
<p>后端路由性能相对前端路由来说较低</p>
<p>前端路由的基本概念：根据不同的事件来显示不同的页面内容，即事件与事件处理函数之间的对应关系<br>前端路由主要做的事情就是监听事件并分发执行事件处理函数</p>
<a id="more"></a>

<h2 id="2-前端路由初体验"><a href="#2-前端路由初体验" class="headerlink" title="2.前端路由初体验"></a>2.前端路由初体验</h2><p>前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换）<br>核心实现依靠一个事件，即监听hash值变化的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onhashchange &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;location.hash可以获取到最新的hash值</span><br><span class="line">    location.hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端路由实现tab栏切换："><a href="#前端路由实现tab栏切换：" class="headerlink" title="前端路由实现tab栏切换："></a>前端路由实现tab栏切换：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- 导入 vue 文件 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue_2.5.22.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 切换组件的超链接 --&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&#x2F;zhuye&quot;&gt;主页&lt;&#x2F;a&gt; </span><br><span class="line">    &lt;a href&#x3D;&quot;#&#x2F;keji&quot;&gt;科技&lt;&#x2F;a&gt; </span><br><span class="line">    &lt;a href&#x3D;&quot;#&#x2F;caijing&quot;&gt;财经&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&#x2F;yule&quot;&gt;娱乐&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;</span><br><span class="line">    &lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;</span><br><span class="line">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; #region 定义需要被切换的 4 个组件</span><br><span class="line">    &#x2F;&#x2F; 主页组件</span><br><span class="line">    const zhuye &#x3D; &#123;</span><br><span class="line">        template: &#39;&lt;h1&gt;主页信息&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 科技组件</span><br><span class="line">    const keji &#x3D; &#123;</span><br><span class="line">        template: &#39;&lt;h1&gt;科技信息&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 财经组件</span><br><span class="line">    const caijing &#x3D; &#123;</span><br><span class="line">        template: &#39;&lt;h1&gt;财经信息&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 娱乐组件</span><br><span class="line">    const yule &#x3D; &#123;</span><br><span class="line">        template: &#39;&lt;h1&gt;娱乐信息&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; #endregion</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; #region vue 实例对象</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        comName: &#39;zhuye&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 注册私有组件</span><br><span class="line">        components: &#123;</span><br><span class="line">        zhuye,</span><br><span class="line">        keji,</span><br><span class="line">        caijing,</span><br><span class="line">        yule</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; #endregion</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span><br><span class="line">    window.onhashchange &#x3D; function() &#123;</span><br><span class="line">        &#x2F;&#x2F; 通过 location.hash 获取到最新的 hash 值</span><br><span class="line">        console.log(location.hash);</span><br><span class="line">        switch(location.hash.slice(1))&#123;</span><br><span class="line">        case &#39;&#x2F;zhuye&#39;:</span><br><span class="line">            vm.comName &#x3D; &#39;zhuye&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;keji&#39;:</span><br><span class="line">            vm.comName &#x3D; &#39;keji&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;caijing&#39;:</span><br><span class="line">            vm.comName &#x3D; &#39;caijing&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;yule&#39;:</span><br><span class="line">            vm.comName &#x3D; &#39;yule&#39;</span><br><span class="line">        break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h3><p>在页面中有一个vue实例对象，vue实例对象中有四个组件，分别是tab栏切换需要显示的组件内容<br>在页面中有四个超链接，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&#x2F;zhuye&quot;&gt;主页&lt;&#x2F;a&gt; </span><br><span class="line">&lt;a href&#x3D;&quot;#&#x2F;keji&quot;&gt;科技&lt;&#x2F;a&gt; </span><br><span class="line">&lt;a href&#x3D;&quot;#&#x2F;caijing&quot;&gt;财经&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#&#x2F;yule&quot;&gt;娱乐&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>当我们点击这些超链接的时候，就会改变url地址中的hash值，当hash值被改变时，就会触发onhashchange事件<br>在触发onhashchange事件的时候，我们根据hash值来让不同的组件进行显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onhashchange &#x3D; function() &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过 location.hash 获取到最新的 hash 值</span><br><span class="line">    console.log(location.hash);</span><br><span class="line">    switch(location.hash.slice(1))&#123;</span><br><span class="line">        case &#39;&#x2F;zhuye&#39;:</span><br><span class="line">        &#x2F;&#x2F;通过更改数据comName来指定显示的组件</span><br><span class="line">        &#x2F;&#x2F;因为 &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt; ，组件已经绑定了comName</span><br><span class="line">        vm.comName &#x3D; &#39;zhuye&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;keji&#39;:</span><br><span class="line">        vm.comName &#x3D; &#39;keji&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;caijing&#39;:</span><br><span class="line">        vm.comName &#x3D; &#39;caijing&#39;</span><br><span class="line">        break</span><br><span class="line">        case &#39;&#x2F;yule&#39;:</span><br><span class="line">        vm.comName &#x3D; &#39;yule&#39;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Vue-Router"><a href="#3-Vue-Router" class="headerlink" title="3.Vue Router"></a>3.Vue Router</h2><p>它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的前端路由器。<br>Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发。<br>Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router</p>
<p>Vue Router的特性：<br>支持H5历史模式或者hash模式<br>支持嵌套路由<br>支持路由参数<br>支持编程式路由<br>支持命名路由<br>支持路由导航守卫<br>支持路由过渡动画特效<br>支持路由懒加载<br>支持路由滚动行为</p>
<h2 id="4-Vue-Router的使用步骤"><a href="#4-Vue-Router的使用步骤" class="headerlink" title="4.Vue Router的使用步骤"></a>4.Vue Router的使用步骤</h2><p>A.导入js文件</p>
<script src="lib/vue_2.5.22.js"></script>
<script src="lib/vue-router_3.0.2.js"></script>

<p>B.添加路由链接:<router-link>是路由中提供的标签，默认会被渲染为a标签，to属性默认被渲染为href属性，<br>to属性的值会被渲染为#开头的hash地址<br><router-link to="/user">User</router-link><br><router-link to="/login">Login</router-link><br>C.添加路由填充位（路由占位符）<br><router-view></router-view><br>D.定义路由组件<br>var User = { template:”<div>This is User</div>“ }<br>var Login = { template:”<div>This is Login</div>“ }<br>E.配置路由规则并创建路由实例<br>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes:[<br>        //每一个路由规则都是一个对象，对象中至少包含path和component两个属性<br>        //path表示  路由匹配的hash地址，component表示路由规则对应要展示的组件对象<br>        {path:”/user”,component:User},<br>        {path:”/login”,component:Login}<br>    ]<br>})<br>F.将路由挂载到Vue实例中<br>new Vue({<br>    el:”#app”,<br>    //通过router属性挂载路由对象<br>    router:myRouter<br>})</p>
<p>小结：<br>A.导入js文件<br>B.添加路由链接<br>C.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)<br>D.定义路由组件<br>E.配置路由规则并创建路由实例<br>F.将路由挂载到Vue实例中</p>
<p>补充：<br>路由重定向：可以通过路由重定向为页面设置默认展示的组件<br>在路由规则中添加一条路由规则即可，如下：<br>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //path设置为/表示页面最初始的地址 / ,redirect表示要被重定向的新地址，设置为一个路由即可<br>        { path:”/“,redirect:”/user”},<br>        { path: “/user”, component: User },<br>        { path: “/login”, component: Login }<br>    ]<br>})</p>
<h2 id="5-嵌套路由，动态路由的实现方式"><a href="#5-嵌套路由，动态路由的实现方式" class="headerlink" title="5.嵌套路由，动态路由的实现方式"></a>5.嵌套路由，动态路由的实现方式</h2><h3 id="A-嵌套路由的概念"><a href="#A-嵌套路由的概念" class="headerlink" title="A.嵌套路由的概念"></a>A.嵌套路由的概念</h3><p>当我们进行路由的时候显示的组件中还有新的子级路由链接以及内容。</p>
<p>嵌套路由最关键的代码在于理解子级路由的概念：<br>比如我们有一个/login的路由<br>那么/login下面还可以添加子级路由，如:<br>/login/account<br>/login/phone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var User &#x3D; &#123; template: &quot;&lt;div&gt;This is User&lt;&#x2F;div&gt;&quot; &#125;</span><br><span class="line">&#x2F;&#x2F;Login组件中的模板代码里面包含了子级路由链接以及子级路由的占位符</span><br><span class="line">    var Login &#x3D; &#123; template: &#96;&lt;div&gt;</span><br><span class="line">        &lt;h1&gt;This is Login&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;account&quot;&gt;账号密码登录&lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;phone&quot;&gt;扫码登录&lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;!-- 子路由组件将会在router-view中显示 --&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96; &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;定义两个子级路由组件</span><br><span class="line">    var account &#x3D; &#123; template:&quot;&lt;div&gt;账号：&lt;input&gt;&lt;br&gt;密码：&lt;input&gt;&lt;&#x2F;div&gt;&quot;&#125;;</span><br><span class="line">    var phone &#x3D; &#123; template:&quot;&lt;h1&gt;扫我二维码&lt;&#x2F;h1&gt;&quot;&#125;;</span><br><span class="line">    var myRouter &#x3D; new VueRouter(&#123;</span><br><span class="line">        &#x2F;&#x2F;routes是路由规则数组</span><br><span class="line">        routes: [</span><br><span class="line">            &#123; path:&quot;&#x2F;&quot;,redirect:&quot;&#x2F;user&quot;&#125;,</span><br><span class="line">            &#123; path: &quot;&#x2F;user&quot;, component: User &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">                path: &quot;&#x2F;login&quot;, </span><br><span class="line">                component: Login,</span><br><span class="line">                &#x2F;&#x2F;通过children属性为&#x2F;login添加子路由规则</span><br><span class="line">                children:[</span><br><span class="line">                    &#123; path: &quot;&#x2F;login&#x2F;account&quot;, component: account &#125;,</span><br><span class="line">                    &#123; path: &quot;&#x2F;login&#x2F;phone&quot;, component: phone &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        router:myRouter</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="B-动态路由匹配"><a href="#B-动态路由匹配" class="headerlink" title="B.动态路由匹配"></a>B.动态路由匹配</h3><p>var User = { template:”<div>用户：</div>“}</p>
<p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        { path: “/user/:id”, component: User },</p>
<pre><code>]</code></pre><p>})</p>
<p>补充：<br>如果使用$route.params.id来获取路径传参的数据不够灵活。<br>1.我们可以通过props来接收参数<br>var User = {<br>    props:[“id”],<br>    template:”<div>用户：{{id}}</div>“<br>    }</p>
<p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为true，route.params将会被设置为组件属性<br>        { path: “/user/:id”, component: User,props:true },</p>
<pre><code>]</code></pre><p>})</p>
<p>2.还有一种情况，我们可以将props设置为对象，那么就直接将对象的数据传递给<br>组件进行使用<br>var User = {<br>    props:[“username”,”pwd”],<br>    template:”<div>用户：—</div>“<br>    }</p>
<p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为对象，则传递的是对象中的数据给组件<br>        { path: “/user/:id”, component: User,props:{username:”jack”,pwd:123} },</p>
<pre><code>]</code></pre><p>})</p>
<p>3.如果想要获取传递的参数值还想要获取传递的对象数据，那么props应该设置为<br>函数形式。<br>var User = {<br>    props:[“username”,”pwd”,”id”],<br>    template:”<div>用户：{{id}} -&gt; {{username}}—{{pwd}}</div>“<br>    }</p>
<p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过/:参数名  的形式传递参数<br>        //如果props设置为函数，则通过函数的第一个参数获取路由对象<br>        //并可以通过路由对象的params属性获取传递的参数<br>        //<br>        { path: “/user/:id”, component: User,props:(route)=&gt;{<br>            return {username:”jack”,pwd:123,id:route.params.id}<br>            }<br>        },</p>
<pre><code>]</code></pre><p>})</p>
<h2 id="7-命名路由以及编程式导航"><a href="#7-命名路由以及编程式导航" class="headerlink" title="7.命名路由以及编程式导航"></a>7.命名路由以及编程式导航</h2><h3 id="A-命名路由：给路由取别名"><a href="#A-命名路由：给路由取别名" class="headerlink" title="A.命名路由：给路由取别名"></a>A.命名路由：给路由取别名</h3><p>案例：</p>
<p>var myRouter = new VueRouter({<br>    //routes是路由规则数组<br>    routes: [<br>        //通过name属性为路由添加一个别名<br>        { path: “/user/:id”, component: User, name:”user”},</p>
<pre><code>]</code></pre><p>})</p>
<p>//添加了别名之后，可以使用别名进行跳转<br><router-link to="/user">User</router-link><br><router-link :to="{ name:'user' , params: {id:123} }">User</router-link></p>
<p>//还可以编程式导航<br>myRouter.push( { name:’user’ , params: {id:123} } )</p>
<h3 id="B-编程式导航-★★★"><a href="#B-编程式导航-★★★" class="headerlink" title="B.编程式导航(★★★)"></a>B.编程式导航(★★★)</h3><p>页面导航的两种方式：<br>A.声明式导航：通过点击链接的方式实现的导航<br>B.编程式导航：调用js的api方法实现导航</p>
<p>Vue-Router中常见的导航方式：<br>this.$router.push(“hash地址”);<br>this.$router.push(“/login”);<br>this.$router.push({ name:’user’ , params: {id:123} });<br>this.$router.push({ path:”/login” });<br>this.$router.push({ path:”/login”,query:{username:”jack”} });</p>
<p>this.$router.go( n );//n为数字，参考history.go<br>this.$router.go( -1 );</p>
]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/06/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h2><h3 id="1-1什么是正则表达式"><a href="#1-1什么是正则表达式" class="headerlink" title="1.1什么是正则表达式"></a>1.1什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p>
<p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p>
<p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p>
<a id="more"></a>

<h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol>
<li>灵活性、逻辑性和功能性非常的强。</li>
<li>可以迅速地用极简单的方式达到字符串的复杂控制。</li>
<li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li>
<li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   /^[a-z0-9_-]{3,16}$/</li>
</ol>
<h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2.正则表达式在js中的使用"></a>2.正则表达式在js中的使用</h2><h3 id="2-1正则表达式的创建"><a href="#2-1正则表达式的创建" class="headerlink" title="2.1正则表达式的创建"></a>2.1正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p>
<p>方式一：通过调用RegExp对象的构造函数创建 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure>

<p>方式二：利用字面量创建 正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2测试正则表达式"><a href="#2-2测试正则表达式" class="headerlink" title="2.2测试正则表达式"></a>2.2测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>));<span class="comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));<span class="comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure>

<h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3.正则表达式中的特殊字符"></a>3.正则表达式中的特殊字符</h2><h3 id="3-1正则表达式的组成"><a href="#3-1正则表达式的组成" class="headerlink" title="3.1正则表达式的组成"></a>3.1正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p>
<p>特殊字符非常多，可以参考： </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a></p>
<p>jQuery 手册：正则表达式部分</p>
<p><a href="<http://tool.oschina.net/regex">正则测试工具</a></p>
<h3 id="3-2边界符"><a href="#3-2边界符" class="headerlink" title="3.2边界符"></a>3.2边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>
<table>
<thead>
<tr>
<th>边界符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>表示匹配行首的文本（以谁开始）</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配行尾的文本（以谁结束）</td>
</tr>
</tbody></table>
<p>如果 ^和 $ 在一起，表示必须是精确匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'aabcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------'</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcabc'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3字符类"><a href="#3-3字符类" class="headerlink" title="3.3字符类"></a>3.3字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p>
<h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [] 方括号"></a>3.3.1 [] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'andy'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'baby'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'color'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'red'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'aa'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'b'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'c'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'abc'</span>));<span class="comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span> <span class="comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'z'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'A'</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'a'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'B'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'!'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2量词符"><a href="#3-3-2量词符" class="headerlink" title="3.3.2量词符"></a>3.3.2量词符</h4><p>量词符用来设定某个模式出现的次数。</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复0次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复1次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复0次或1次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<h4 id="3-3-3用户名表单验证"><a href="#3-3-3用户名表单验证" class="headerlink" title="3.3.3用户名表单验证"></a>3.3.3用户名表单验证</h4><p>功能需求:</p>
<ol>
<li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li>
<li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li>
</ol>
<p>分析:</p>
<ol>
<li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li>
<li>首先准备好这种正则表达式模式/$[a-zA-Z0-9-_]{6,16}^/</li>
<li>当表单失去焦点就开始验证. </li>
<li>如果符合正则规范, 则让后面的span标签添加 right类.</li>
<li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"uname"</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="comment">//  量词是设定某个模式出现的次数</span></span><br><span class="line"> <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span></span><br><span class="line"> <span class="keyword">var</span> uname = <span class="built_in">document</span>.querySelector(<span class="string">'.uname'</span>);</span><br><span class="line"> <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">'span'</span>);</span><br><span class="line"> uname.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (reg.test(<span class="keyword">this</span>.value)) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'正确的'</span>);</span><br><span class="line">   span.className = <span class="string">'right'</span>;</span><br><span class="line">   span.innerHTML = <span class="string">'用户名格式输入正确'</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'错误的'</span>);</span><br><span class="line">   span.className = <span class="string">'wrong'</span>;</span><br><span class="line">   span.innerHTML = <span class="string">'用户名格式输入不正确'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p>
<p>2.中括号 字符集合。匹配方括号中的任意字符. </p>
<p>3.小括号表示优先级</p>
<p><a href="https://c.runoob.com/" target="_blank" rel="noopener">正则表达式在线测试</a></p>
<h3 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p>
<p><strong>案例:验证座机号码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<p><strong>表单验证案例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"> <span class="keyword">if</span> (reg.test(<span class="keyword">this</span>.value)) &#123;</span><br><span class="line">    <span class="comment">// console.log('正确的');</span></span><br><span class="line">    <span class="keyword">this</span>.nextElementSibling.className = <span class="string">'success'</span>;</span><br><span class="line">    <span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// console.log('不正确');</span></span><br><span class="line">      <span class="keyword">this</span>.nextElementSibling.className = <span class="string">'error'</span>;</span><br><span class="line">      <span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="error_icon"&gt;&lt;/i&gt;格式不正确,请从新输入 '</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span></span><br><span class="line"><span class="comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">regexp</span>(<span class="params">ele, reg</span>) </span>&#123;</span><br><span class="line">    ele.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.test(<span class="keyword">this</span>.value)) &#123;</span><br><span class="line">        <span class="comment">// console.log('正确的');</span></span><br><span class="line">        <span class="keyword">this</span>.nextElementSibling.className = <span class="string">'success'</span>;</span><br><span class="line">        <span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜您输入正确'</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// console.log('不正确');</span></span><br><span class="line">     <span class="keyword">this</span>.nextElementSibling.className = <span class="string">'error'</span>;</span><br><span class="line">     <span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="error_icon"&gt;&lt;/i&gt; 格式不正确,请从新输入 '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5正则替换replace"><a href="#3-5正则替换replace" class="headerlink" title="3.5正则替换replace"></a>3.5正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'andy和red'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="string">'andy'</span>, <span class="string">'baby'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.replace(<span class="regexp">/andy/</span>, <span class="string">'baby'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr2)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//全部替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcabc'</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>,<span class="string">'哈哈'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bcabc</span></span><br><span class="line"><span class="comment">//全部替换g</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>a,<span class="string">'哈哈'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="comment">//忽略大小写i</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'aAbcAba'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/a/gi</span>,<span class="string">'哈哈'</span>)<span class="comment">//"哈哈哈哈bc哈哈b哈哈"</span></span><br></pre></td></tr></table></figure>

<p><strong>案例:过滤敏感词汇</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">""</span> id=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/textarea&gt; &lt;button&gt;提交&lt;/</span>button&gt;</span><br><span class="line">&lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var text = document.querySelector('textarea');</span></span><br><span class="line"><span class="regexp">    var btn = document.querySelector('button');</span></span><br><span class="line"><span class="regexp">    var div = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">    btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">    	div.innerHTML = text.value.replace(/</span>激情|gay/g, <span class="string">'**'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Vue常用指令</title>
    <url>/2020/06/06/Vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="Vue-是什么？"><a href="#Vue-是什么？" class="headerlink" title="Vue 是什么？"></a>Vue 是什么？</h3><ul>
<li><strong>Vue  是一套用于构建用户界面的渐进式框架</strong></li>
<li>vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合 </li>
</ul>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p>本质就是自定义属性</p>
</li>
<li><p>Vue中指定都是以 v- 开头 </p>
<a id="more"></a>

</li>
</ul>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul>
<li><p>防止页面加载时出现闪烁问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  /* </span><br><span class="line">    1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏</span><br><span class="line"> */</span><br><span class="line"><span class="css">  <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 元素隐藏    */</span></span></span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性 </span></span><br><span class="line"><span class="comment">         在 数据渲染完场之后，v-cloak 属性会被自动去除，</span></span><br><span class="line"><span class="comment">         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签</span></span><br><span class="line"><span class="comment">		 也就是对应的标签会变为可见</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-cloak</span>  &gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//  el   指定元素 id 是 app 的元素  </span></span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//  data  里面存储的是数据</span></span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Hello Vue'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul>
<li>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li>
<li>如果数据中有HTML标签会将html标签一并输出</li>
<li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">		注意:在指令中不要写插值语法  直接写对应的变量名称 </span></span><br><span class="line"><span class="comment">        在 v-text 中 赋值的时候不要在写 插值语法</span></span><br><span class="line"><span class="comment">		一般属性中不加 &#123;&#123;&#125;&#125;  直接写 对应 的数据名 </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Vue  中只有在标签的 内容中 才用插值语法 --&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'Hello Vue.js'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul>
<li><p>用法和v-text 相似  但是他可以将HTML片段填充到标签中</p>
</li>
<li><p>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</p>
</li>
<li><p>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：html标签在渲染的时候被解析 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：&lt;span&gt;通过双括号绑定&lt;/span&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">　　<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：&lt;span&gt;html标签在渲染的时候被源码输出&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">　　<span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">　　el: <span class="string">"#app"</span>,</span></span><br><span class="line">　　data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">　　　　message: "<span class="tag">&lt;<span class="name">span</span>&gt;</span>通过双括号绑定<span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">　　　　html: "<span class="tag">&lt;<span class="name">span</span>&gt;</span>html标签在渲染的时候被解析<span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">　　　　text: "<span class="tag">&lt;<span class="name">span</span>&gt;</span>html标签在渲染的时候被源码输出<span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span></span><br><span class="line">　　&#125;</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul>
<li>显示原始信息跳过编译过程</li>
<li>跳过这个元素和它的子元素的编译过程。</li>
<li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line">	<span class="comment">&lt;!--  显示的是&#123;&#123; this will not be compiled &#125;&#125;  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'Hello Vue.js'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h3><ul>
<li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'Hello Vue.js'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul>
<li>当数据发生变化的时候，视图也就发生变化</li>
<li>当视图发生变化的时候，数据也会跟着同步变化</li>
</ul>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul>
<li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         当输入框中内容改变的时候，  页面上的msg  会自动更新</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><ul>
<li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li>
<li>m   model  <ul>
<li>数据层   Vue  中 数据层 都放在 data 里面</li>
</ul>
</li>
<li>v   view     视图   <ul>
<li>Vue  中  view      即 我们的HTML页面  </li>
</ul>
</li>
<li>vm   （view-model）     控制器     将数据和视图层建立联系      <ul>
<li>vm 即  Vue 的实例  就是 vm  </li>
</ul>
</li>
</ul>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul>
<li>用来绑定事件的</li>
<li>形式如：v-on:click  缩写为 @click;</li>
</ul>
<h3 id="v-on事件函数中传入参数"><a href="#v-on事件函数中传入参数" class="headerlink" title="v-on事件函数中传入参数"></a>v-on事件函数中传入参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'handle1'</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2、如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，</span></span><br><span class="line"><span class="comment">                 并且事件对象的名称必须是$event </span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'handle2(123, 456, $event)'</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                num: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handle1: <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                handle2: <span class="function"><span class="keyword">function</span><span class="params">(p, p1, event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(p, p1)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.num++;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul>
<li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li>
<li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li>
<li>修饰符是由点开头的指令后缀来表示的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure>

<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul>
<li>在做项目中有时会用到键盘事件，在监听键盘事件时，需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keyup.enter.space</span>=<span class="string">"alertMe"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">              submit:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span></span><br><span class="line"><span class="actionscript">              alertMe:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义按键修饰符别名"><a href="#自定义按键修饰符别名" class="headerlink" title="自定义按键修饰符别名"></a>自定义按键修饰符别名</h3><ul>
<li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keydown.f5</span>=<span class="string">"prompt()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    Vue.config.keyCodes.f5 = 116;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            prompt: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'我是 F5！'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul>
<li>v-bind 指令被用来响应地更新 HTML 属性</li>
<li>v-bind:href    可以缩写为    :href;</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><ul>
<li>我们可以给v-bind:class 一个对象，以动态地切换class。</li>
<li>注意：v-bind:class指令可以与普通的class特性共存</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、 v-bind 中支持绑定一个对象 </span><br><span class="line">	如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	HTML最终渲染为 &lt;ul class="box textColor textSize"&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">	注意：</span></span><br><span class="line"><span class="comment">		textColor，textSize  对应的渲染到页面上的CSS类名	</span></span><br><span class="line"><span class="comment">		isColor，isSize  对应vue data中的数据  如果为true 则对应的类名 渲染到页面上 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		当 isColor 和 isSize 变化时，class列表将相应的更新，</span></span><br><span class="line"><span class="comment">		例如，将isSize改成false，</span></span><br><span class="line"><span class="comment">		class列表将变为 &lt;ul class="box textColor"&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;textColor:isColor, textSize:isSize&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Node<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color:activeColor,fontSize:activeSize&#125;"</span>&gt;</span>对象语法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sript</span>&gt;</span></span><br><span class="line">var vm= new Vue(&#123;</span><br><span class="line">    el:'.box',</span><br><span class="line">    data:&#123;</span><br><span class="line">        isColor:true,</span><br><span class="line">        isSize:true，</span><br><span class="line">    	activeColor:"red",</span><br><span class="line">        activeSize:"25px",</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">sript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f0f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>:<span class="selector-id">#eef</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">2、  v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</span><br><span class="line"></span><br><span class="line">这里的classA  对用data 中的  classA</span><br><span class="line">这里的classB  对用data 中的  classB</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Node<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'.box'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        classA:‘textColor‘,</span><br><span class="line">        classB:‘textSize‘</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f0f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>:<span class="selector-id">#eef</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul>
<li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li>
<li>绑定数组的时候数组里面存的是data 中的数据 </li>
</ul>
<h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span>绑定样式对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize,background:'red' &#125;"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[styleObj1, styleObj2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        styleObject: &#123;</span><br><span class="line"><span class="actionscript">          color: <span class="string">'green'</span>,</span></span><br><span class="line"><span class="actionscript">          fontSize: <span class="string">'30px'</span>,</span></span><br><span class="line"><span class="actionscript">          background:<span class="string">'red'</span></span></span><br><span class="line">        &#125;，</span><br><span class="line"><span class="actionscript">        activeColor: <span class="string">'green'</span>,</span></span><br><span class="line"><span class="actionscript">   		fontSize: <span class="string">"30px"</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj1: &#123;</span><br><span class="line"><span class="actionscript">             color: <span class="string">'red'</span></span></span><br><span class="line">       &#125;,</span><br><span class="line">       styleObj2: &#123;</span><br><span class="line"><span class="actionscript">            fontSize: <span class="string">'30px'</span></span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h4><ul>
<li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li>
<li>2- 进行两个视图之间的切换</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  判断是否加载，如果为真，就加载，否则不加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">           如果flag为true则显示,false不显示!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">       A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-else-if紧跟在v-if或v-else-if之后   表示v-if条件不成立时执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">       B</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">       C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-else紧跟在v-if或v-else-if之后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">       Not A/B/C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        type: <span class="string">'C'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul>
<li>v-show本质就是标签display设置为none，控制隐藏<ul>
<li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li>
</ul>
</li>
<li>v-if是动态的向DOM树内添加或者删除DOM元素<ul>
<li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li>
</ul>
</li>
</ul>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul>
<li>用于循环的数组里面的值可以是对象，也可以是普通元素  </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 循环结构-遍历数组  </span></span><br><span class="line"><span class="comment">	item 是我们自己定义的一个名字  代表数组里面的每一项  </span></span><br><span class="line"><span class="comment">	items对应的是 data中的数组--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#example-1'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line"><span class="actionscript">      &#123; message: <span class="string">'Foo'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; message: <span class="string">'Bar'</span> &#125;</span></span><br><span class="line">    ]，</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li>
<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--  循环结构-遍历对象</span></span><br><span class="line"><span class="comment">		v 代表   对象的value</span></span><br><span class="line"><span class="comment">		k  代表对象的 键 </span></span><br><span class="line"><span class="comment">		i  代表索引	</span></span><br><span class="line"><span class="comment">	---&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">'v==13'</span> <span class="attr">v-for</span>=<span class="string">'(v,k,i) in obj'</span>&gt;</span>&#123;&#123;v + '---' + k + '---' + i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#example-1'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line"><span class="actionscript">      &#123; message: <span class="string">'Foo'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; message: <span class="string">'Bar'</span> &#125;</span></span><br><span class="line">    ]，</span><br><span class="line">    obj: &#123;</span><br><span class="line"><span class="actionscript">        uname: <span class="string">'zhangsan'</span>,</span></span><br><span class="line">        age: 13,</span><br><span class="line"><span class="actionscript">        gender: <span class="string">'female'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>key 的作用<ul>
<li><strong>key来给每个节点做一个唯一标识</strong></li>
<li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="案例：选项卡"><a href="#案例：选项卡" class="headerlink" title="案例：选项卡"></a>案例：选项卡</h3><h4 id="1、-HTML-结构"><a href="#1、-HTML-结构" class="headerlink" title="1、 HTML 结构"></a>1、 HTML 结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">`</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  tab栏  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>lemon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--  对应显示的图片 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/orange.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/lemon.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<h4 id="2、-提供的数据"><a href="#2、-提供的数据" class="headerlink" title="2、 提供的数据"></a>2、 提供的数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">list: [&#123;</span><br><span class="line">           id: <span class="number">1</span>,</span><br><span class="line">           title: <span class="string">'apple'</span>,</span><br><span class="line">           path: <span class="string">'img/apple.png'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           id: <span class="number">2</span>,</span><br><span class="line">           title: <span class="string">'orange'</span>,</span><br><span class="line">           path: <span class="string">'img/orange.png'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           id: <span class="number">3</span>,</span><br><span class="line">           title: <span class="string">'lemon'</span>,</span><br><span class="line">           path: <span class="string">'img/lemon.png'</span></span><br><span class="line">       &#125;]</span><br></pre></td></tr></table></figure>



<h4 id="3、-把数据渲染到页面"><a href="#3、-把数据渲染到页面" class="headerlink" title="3、 把数据渲染到页面"></a>3、 把数据渲染到页面</h4><ul>
<li><p>把tab栏 中的数替换到页面上</p>
<ul>
<li>把 data 中 title  利用 v-for 循环渲染到页面上 </li>
<li>把 data 中 path利用 v-for 循环渲染到页面上 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">                    1、绑定key的作用 提高Vue的性能 </span></span><br><span class="line"><span class="comment">                    2、 key 需要是唯一的标识 所以需要使用id， 也可以使用index ，</span></span><br><span class="line"><span class="comment">						index 也是唯一的 </span></span><br><span class="line"><span class="comment">                    3、 item 是 数组中对应的每一项  </span></span><br><span class="line"><span class="comment">                    4、 index 是 每一项的 索引</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in list'</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>  <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.path"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  指定 操作元素 是 id 为app 的 </span></span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'apple'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'orange'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'lemon'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="4、-给每一个tab栏添加事件-并让选中的高亮"><a href="#4、-给每一个tab栏添加事件-并让选中的高亮" class="headerlink" title="4、 给每一个tab栏添加事件,并让选中的高亮"></a>4、 给每一个tab栏添加事件,并让选中的高亮</h4><ul>
<li><p>4.1 、让默认的第一项tab栏高亮</p>
<ul>
<li>tab栏高亮 通过添加类名active 来实现   （CSS  active 的样式已经提前写好）<ul>
<li>在data 中定义一个 默认的  索引 currentIndex  为  0 </li>
<li>给第一个li 添加 active 的类名  <ul>
<li>通过动态绑定class 来实现   第一个li 的索引为 0     和 currentIndex   的值刚好相等</li>
<li>currentIndex     ===  index  如果相等  则添加类名 active  否则 添加 空类名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.2 、让默认的第一项tab栏对应的div 显示 </p>
<ul>
<li>实现思路 和 第一个 tab 实现思路一样  只不过 这里控制第一个div 显示的类名是 current</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	   <span class="comment">&lt;!-- 动态绑定class   有 active   类名高亮  无 active   不高亮--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>  <span class="attr">:class</span>=<span class="string">'currentIndex==index?"active":""'</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in list'</span></span></span><br><span class="line"><span class="tag">           &gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 动态绑定class   有 current  类名显示  无 current  隐藏--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">'currentIndex==index?"current":""'</span> </span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.path"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                currentIndex: <span class="number">0</span>, <span class="comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'apple'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'orange'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'lemon'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4.3 、点击每一个tab栏 当前的高亮 其他的取消高亮 </p>
<ul>
<li><p>给每一个li添加点击事件    </p>
</li>
<li><p>让当前的索引 index  和  当前 currentIndex 的  值 进项比较 </p>
</li>
<li><p>如果相等 则当前li  添加active 类名 当前的 li 高亮  当前对应索引的 div 添加 current 当前div 显示 其他隐藏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  通过v-on 添加点击事件   需要把当前li 的索引传过去 </span></span><br><span class="line"><span class="comment">				--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-on:click</span>=<span class="string">'change(index)'</span>		           			</span></span><br><span class="line"><span class="tag">                    <span class="attr">:class</span>=<span class="string">'currentIndex==index?"active":""'</span>                   </span></span><br><span class="line"><span class="tag">                    <span class="attr">:key</span>=<span class="string">'item.id'</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-for</span>=<span class="string">'(item,index) in list'</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">'currentIndex==index?"current":""'</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'(item, index) in list'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.path"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span>  Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                currentIndex: <span class="number">0</span>, <span class="comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'apple'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/apple.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'orange'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/orange.png'</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'lemon'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'img/lemon.png'</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                change: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 通过传入过来的索引来让当前的  currentIndex  和点击的index 值 相等 </span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//  从而实现 控制类名    </span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.currentIndex = index;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Vue前端工程化</title>
    <url>/2020/06/06/Vue%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h3 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h3><h4 id="A-浏览器端的模块化"><a href="#A-浏览器端的模块化" class="headerlink" title="A.浏览器端的模块化"></a>A.浏览器端的模块化</h4><p>​        1).AMD(Asynchronous Module Definition,异步模块定义)<br>​        代表产品为：Require.js<br>​        2).CMD(Common Module Definition,通用模块定义)<br>​        代表产品为：Sea.js</p>
<h4 id="B-服务器端的模块化"><a href="#B-服务器端的模块化" class="headerlink" title="B.服务器端的模块化"></a>B.服务器端的模块化</h4><p>​        服务器端的模块化规范是使用CommonJS规范：<br>​        1).使用require引入其他模块或者包<br>​        2).使用exports或者module.exports导出模块成员<br>​        3).一个文件就是一个模块，都拥有独立的作用域</p>
<h4 id="C-ES6模块化"><a href="#C-ES6模块化" class="headerlink" title="C.ES6模块化"></a>C.ES6模块化</h4><p>​        ES6模块化规范中定义：<br>​            1).每一个js文件都是独立的模块<br>​            2).导入模块成员使用import关键字<br>​            3).暴露模块成员使用export关键字</p>
<p>小结：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。<br>      ES6模块化是浏览器端和服务器端通用的规范.</p>
<a id="more"></a>

<h3 id="2-在NodeJS中安装babel"><a href="#2-在NodeJS中安装babel" class="headerlink" title="2.在NodeJS中安装babel"></a>2.在NodeJS中安装babel</h3><h4 id="A-安装babel"><a href="#A-安装babel" class="headerlink" title="A.安装babel"></a>A.安装babel</h4><p>​    打开终端，输入命令：npm install –save-dev @babel/core @babel/cli @babel/preset-env @babel/node<br>​    安装完毕之后，再次输入命令安装：npm install –save @babel/polyfill</p>
<h4 id="B-创建babel-config-js"><a href="#B-创建babel-config-js" class="headerlink" title="B.创建babel.config.js"></a>B.创建babel.config.js</h4><p>​    在项目目录中创建babel.config.js文件。<br>​    编辑js文件中的代码如下：<br>​        const presets = [<br>​            [“@babel/env”,{<br>​                targets:{<br>​                    edge:”17”,<br>​                    firefox:”60”,<br>​                    chrome:”67”,<br>​                    safari:”11.1”<br>​                }<br>​            }]<br>​        ]<br>​        //暴露<br>​        module.exports = { presets }</p>
<h4 id="C-创建index-js文件"><a href="#C-创建index-js文件" class="headerlink" title="C.创建index.js文件"></a>C.创建index.js文件</h4><p>​    在项目目录中创建index.js文件作为入口文件<br>​    在index.js中输入需要执行的js代码，例如：<br>​        console.log(“ok”);</p>
<h4 id="D-使用npx执行文件"><a href="#D-使用npx执行文件" class="headerlink" title="D.使用npx执行文件"></a>D.使用npx执行文件</h4><p>​    打开终端，输入命令：npx babel-node ./index.js</p>
<h3 id="3-设置默认导入-导出"><a href="#3-设置默认导入-导出" class="headerlink" title="3.设置默认导入/导出"></a>3.设置默认导入/导出</h3><h4 id="A-默认导出"><a href="#A-默认导出" class="headerlink" title="A.默认导出"></a>A.默认导出</h4><p>​    export default {<br>​        成员A,<br>​        成员B,<br>​        …….<br>​    },如下：<br>​    let num = 100;<br>​    export default{<br>​        num<br>​    }</p>
<h4 id="B-默认导入"><a href="#B-默认导入" class="headerlink" title="B.默认导入"></a>B.默认导入</h4><p>​    import 接收名称 from “模块标识符”，如下：<br>​    import test from “./test.js”</p>
<p>注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。<br>如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象 </p>
<h3 id="4-设置按需导入-导出"><a href="#4-设置按需导入-导出" class="headerlink" title="4.设置按需导入/导出"></a>4.设置按需导入/导出</h3><h4 id="A-按需导出"><a href="#A-按需导出" class="headerlink" title="A.按需导出"></a>A.按需导出</h4><p>​    export let num = 998;<br>​    export let myName = “jack”;<br>​    export function fn = function(){ console.log(“fn”) }</p>
<h4 id="B-按需导入"><a href="#B-按需导入" class="headerlink" title="B.按需导入"></a>B.按需导入</h4><p>​    import { num,fn as printFn ,myName } from “./test.js”<br>​    //同时导入默认导出的成员以及按需导入的成员<br>​    import test,{ num,fn as printFn ,myName } from “./test.js”<br>注意：一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p>
<h3 id="5-直接导入并执行代码"><a href="#5-直接导入并执行代码" class="headerlink" title="5.直接导入并执行代码"></a>5.直接导入并执行代码</h3><p>​    import “./test2.js”;</p>
<h3 id="6-webpack的概念"><a href="#6-webpack的概念" class="headerlink" title="6.webpack的概念"></a>6.webpack的概念</h3><p>webpack是一个流行的前端项目构建工具，可以解决目前web开发的困境。<br>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目的可维护性</p>
<h3 id="7-webpack的基本使用"><a href="#7-webpack的基本使用" class="headerlink" title="7.webpack的基本使用"></a>7.webpack的基本使用</h3><h4 id="A-创建项目目录并初始化"><a href="#A-创建项目目录并初始化" class="headerlink" title="A.创建项目目录并初始化"></a>A.创建项目目录并初始化</h4><p>​    创建项目，并打开项目所在目录的终端，输入命令：<br>​        npm init -y</p>
<h4 id="B-创建首页及js文件"><a href="#B-创建首页及js文件" class="headerlink" title="B.创建首页及js文件"></a>B.创建首页及js文件</h4><p>​    在项目目录中创建index.html页面，并初始化页面结构：在页面中摆放一个ul，ul里面放置几个li<br>​    在项目目录中创建js文件夹，并在文件夹中创建index.js文件</p>
<h4 id="C-安装jQuery"><a href="#C-安装jQuery" class="headerlink" title="C.安装jQuery"></a>C.安装jQuery</h4><p>​    打开项目目录终端，输入命令:<br>​    npm install jQuery -S</p>
<h4 id="D-导入jQuery"><a href="#D-导入jQuery" class="headerlink" title="D.导入jQuery"></a>D.导入jQuery</h4><p>​    打开index.js文件，编写代码导入jQuery并实现功能：<br>​    import $ from “jquery”;<br>​    $(function(){<br>​        $(“li:odd”).css(“background”,”cyan”);<br>​        $(“li:odd”).css(“background”,”pink”);<br>​    })<br>注意：</p>
<p>此时项目运行会有错误，因为import $ from “jquery”;这句代码属于ES6的新语法代码，在浏览器中可能会存在兼容性问题<br>所以我们需要webpack来帮助我们解决这个问题。</p>
<h4 id="E-安装webpack"><a href="#E-安装webpack" class="headerlink" title="E.安装webpack"></a>E.安装webpack</h4><p>​    1).打开项目目录终端，输入命令:<br>​    npm install webpack webpack-cli -D<br>​    2).然后在项目根目录中，创建一个 webpack.config.js 的配置文件用来配置webpack<br>​    在 webpack.config.js 文件中编写代码进行webpack配置，如下：<br>​    module.exports = {<br>​        mode:”development”//可以设置为development(开发模式)，production(发布模式)<br>​    }<br>​    补充：mode设置的是项目的编译模式。<br>​    如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些<br>​    如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些<br>​    3).修改项目中的package.json文件添加运行脚本dev，如下：<br>​    “scripts”:{<br>​        “dev”:”webpack”<br>​    }<br>​    注意：scripts节点下的脚本，可以通过 npm run 运行，如：<br>​    运行终端命令：npm run dev<br>​    将会启动webpack进行项目打包<br>​    4).运行dev命令进行项目打包，并在页面中引入项目打包生成的js文件<br>​    打开项目目录终端，输入命令:<br>​    npm run dev<br>​    等待webpack打包完毕之后，找到默认的dist路径中生成的main.js文件，将其引入到html页面中。<br>​    浏览页面查看效果。</p>
<h3 id="8-设置webpack的打包入口-出口"><a href="#8-设置webpack的打包入口-出口" class="headerlink" title="8.设置webpack的打包入口/出口"></a>8.设置webpack的打包入口/出口</h3><p>​    在webpack 4.x中，默认会将src/index.js 作为默认的打包入口js文件<br>​                     默认会将dist/main.js 作为默认的打包输出js文件<br>​    如果不想使用默认的入口/出口js文件，我们可以通过改变 webpack.config.js 来设置入口/出口的js文件，如下：<br>​    const path = require(“path”);<br>​    module.exports = {<br>​        mode:”development”,<br>​        //设置入口文件路径<br>​        entry: path.join(<strong>dirname,”./src/xx.js”),<br>​        //设置出口文件<br>​        output:{<br>​            //设置路径<br>​            path:path.join(</strong>dirname,”./dist”),<br>​            //设置文件名<br>​            filename:”res.js”<br>​        }<br>​    }</p>
<h3 id="9-设置webpack的自动打包"><a href="#9-设置webpack的自动打包" class="headerlink" title="9.设置webpack的自动打包"></a>9.设置webpack的自动打包</h3><p>​    默认情况下，我们更改入口js文件的代码，需要重新运行命令打包webpack，才能生成出口的js文件<br>​    那么每次都要重新执行命令打包，这是一个非常繁琐的事情，那么，自动打包可以解决这样繁琐的操作。<br>​    实现自动打包功能的步骤如下：<br>​        A.安装自动打包功能的包:webpack-dev-server<br>​            npm install webpack-dev-server -D<br>​        B.修改package.json中的dev指令如下：<br>​            “scripts”:{<br>​                “dev”:”webpack-dev-server”<br>​            }<br>​        C.将引入的js文件路径更改为：<script src="/bundle.js"></script><br>​        D.运行npm run dev，进行打包<br>​        E.打开网址查看效果：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>​    </p>
<pre><code>注意：webpack-dev-server自动打包的输出文件，默认放到了服务器的根目录中.</code></pre><p>补充：<br>在自动打包完毕之后，默认打开服务器网页，实现方式就是打开package.json文件，修改dev命令：<br>    “dev”: “webpack-dev-server –open –host 127.0.0.1 –port 9999”</p>
<h3 id="10-配置html-webpack-plugin"><a href="#10-配置html-webpack-plugin" class="headerlink" title="10.配置html-webpack-plugin"></a>10.配置html-webpack-plugin</h3><p>​    使用html-webpack-plugin 可以生成一个预览页面。<br>​    因为当我们访问默认的 <a href="http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面" target="_blank" rel="noopener">http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面</a><br>​    还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。<br>​    实现默认预览页面功能的步骤如下：<br>​        A.安装默认预览功能的包:html-webpack-plugin<br>​            npm install html-webpack-plugin -D<br>​        B.修改webpack.config.js文件，如下：<br>​            //导入包<br>​            const HtmlWebpackPlugin = require(“html-webpack-plugin”);<br>​            //创建对象<br>​            const htmlPlugin = new HtmlWebpackPlugin({<br>​                //设置生成预览页面的模板文件<br>​                template:”./src/index.html”,<br>​                //设置生成的预览页面名称<br>​                filename:”index.html”<br>​            })<br>​        C.继续修改webpack.config.js文件，添加plugins信息：<br>​            module.exports = {<br>​                ……<br>​                plugins:[ htmlPlugin ]<br>​            }</p>
<h3 id="11-webpack中的加载器"><a href="#11-webpack中的加载器" class="headerlink" title="11.webpack中的加载器"></a>11.webpack中的加载器</h3><p>​    通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包<br>​        loader加载器包含：<br>​            1).less-loader<br>​            2).sass-loader<br>​            3).url-loader:打包处理css中与url路径有关的文件<br>​            4).babel-loader:处理高级js语法的加载器<br>​            5).postcss-loader<br>​            6).css-loader,style-loader<br>​    </p>
<pre><code>注意：指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用

A.安装style-loader,css-loader来处理样式文件
    1).安装包
        npm install style-loader css-loader -D
    2).配置规则：更改webpack.config.js的module中的rules数组
    module.exports = {
        ......
        plugins:[ htmlPlugin ],
        module : {
            rules:[
                {
                    //test设置需要匹配的文件类型，支持正则
                    test:/\.css$/,
                    //use表示该文件类型需要调用的loader
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;]
                }
            ]
        }
    }
B.安装less,less-loader处理less文件
    1).安装包
        npm install less-loader less -D
    2).配置规则：更改webpack.config.js的module中的rules数组
    module.exports = {
        ......
        plugins:[ htmlPlugin ],
        module : {
            rules:[
                {
                    //test设置需要匹配的文件类型，支持正则
                    test:/\.css$/,
                    //use表示该文件类型需要调用的loader
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;]
                },
                {
                    test:/\.less$/,
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]
                }
            ]
        }
    }
C.安装sass-loader,node-sass处理less文件
    1).安装包
        npm install sass-loader node-sass -D
    2).配置规则：更改webpack.config.js的module中的rules数组
    module.exports = {
        ......
        plugins:[ htmlPlugin ],
        module : {
            rules:[
                {
                    //test设置需要匹配的文件类型，支持正则
                    test:/\.css$/,
                    //use表示该文件类型需要调用的loader
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;]
                },
                {
                    test:/\.less$/,
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]
                },
                {
                    test:/\.scss$/,
                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]
                }
            ]
        }
    }

    补充：安装sass-loader失败时，大部分情况是因为网络原因，详情参考：
    https://segmentfault.com/a/1190000010984731?utm_source=tag-newest

D.安装post-css自动添加css的兼容性前缀（-ie-,-webkit-）
1).安装包
    npm install postcss-loader autoprefixer -D
2).在项目根目录创建并配置postcss.config.js文件
const autoprefixer = require(&quot;autoprefixer&quot;);
module.exports = {
    plugins:[ autoprefixer ]
}
3).配置规则：更改webpack.config.js的module中的rules数组
module.exports = {
    ......
    plugins:[ htmlPlugin ],
    module : {
        rules:[
            {
                //test设置需要匹配的文件类型，支持正则
                test:/\.css$/,
                //use表示该文件类型需要调用的loader
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;postcss-loader&apos;]
            },
            {
                test:/\.less$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]
            },
            {
                test:/\.scss$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]
            }
        ]
    }
}

E.打包样式表中的图片以及字体文件
在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理
使用url-loader和file-loader来处理打包图片文件以及字体文件
1).安装包
    npm install url-loader file-loader -D
2).配置规则：更改webpack.config.js的module中的rules数组
module.exports = {
    ......
    plugins:[ htmlPlugin ],
    module : {
        rules:[
            {
                //test设置需要匹配的文件类型，支持正则
                test:/\.css$/,
                //use表示该文件类型需要调用的loader
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]
            },
            {
                test:/\.less$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]
            },
            {
                test:/\.scss$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]
            },{
                test:/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,
                //limit用来设置字节数，只有小于limit值的图片，才会转换
                //为base64图片
                use:&quot;url-loader?limit=16940&quot;
            }
        ]
    }
}

F.打包js文件中的高级语法：在编写js的时候，有时候我们会使用高版本的js语法
有可能这些高版本的语法不被兼容，我们需要将之打包为兼容性的js代码
我们需要安装babel系列的包
A.安装babel转换器
    npm install babel-loader @babel/core @babel/runtime -D
B.安装babel语法插件包
    npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D
C.在项目根目录创建并配置babel.config.js文件

    module.exports = {
        presets:[&quot;@babel/preset-env&quot;],
        plugins:[ &quot;@babel/plugin-transform-runtime&quot;, &quot;@babel/plugin-proposal-class-properties&quot; ]
    }
D.配置规则：更改webpack.config.js的module中的rules数组
module.exports = {
    ......
    plugins:[ htmlPlugin ],
    module : {
        rules:[
            {
                //test设置需要匹配的文件类型，支持正则
                test:/\.css$/,
                //use表示该文件类型需要调用的loader
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]
            },
            {
                test:/\.less$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]
            },
            {
                test:/\.scss$/,
                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]
            },{
                test:/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,
                //limit用来设置字节数，只有小于limit值的图片，才会转换
                //为base64图片
                use:&quot;url-loader?limit=16940&quot;
            },{
                test:/\.js$/,
                use:&quot;babel-loader&quot;,
                //exclude为排除项，意思是不要处理node_modules中的js文件
                exclude:/node_modules/
            }
        ]
    }
}</code></pre><h3 id="12-Vue单文件组件"><a href="#12-Vue单文件组件" class="headerlink" title="12.Vue单文件组件"></a>12.Vue单文件组件</h3><p>传统Vue组件的缺陷：<br>全局定义的组件不能重名，字符串模板缺乏语法高亮，不支持css(当html和js组件化时，css没有参与其中)<br>没有构建步骤限制，只能使用H5和ES5，不能使用预处理器（babel）<br>解决方案：<br>使用Vue单文件组件，每个单文件组件的后缀名都是.vue<br>每一个Vue单文件组件都由三部分组成<br>1).template组件组成的模板区域<br>2).script组成的业务逻辑区域<br>3).style样式区域</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    组件代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    js代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">    样式代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>配置.vue文件的加载器<br>A.安装vue组件的加载器<br>    npm install vue-loader vue-template-compiler -D<br>B.配置规则：更改webpack.config.js的module中的rules数组<br>    const VueLoaderPlugin = require(“vue-loader/lib/plugin”);<br>    const vuePlugin = new VueLoaderPlugin();<br>    module.exports = {<br>        ……<br>        plugins:[ htmlPlugin, vuePlugin  ],<br>        module : {<br>            rules:[<br>                …//其他规则<br>                {<br>                    test:/.vue$/,<br>                    loader:”vue-loader”,</p>
<pre><code>            }
        ]
    }
}</code></pre><h3 id="13-在webpack中使用vue"><a href="#13-在webpack中使用vue" class="headerlink" title="13.在webpack中使用vue"></a>13.在webpack中使用vue</h3><p>上一节我们安装处理了vue单文件组件的加载器，想要让vue单文件组件能够使用，我们必须要安装vue<br>并使用vue来引用vue单文件组件。<br>A.安装Vue<br>    npm install vue -S<br>B.在index.js中引入vue：import Vue from “vue”<br>C.创建Vue实例对象并指定el，最后使用render函数渲染单文件组件<br>    const vm = new Vue({<br>        el:”#first”,<br>        render:h=&gt;h(app)<br>    })</p>
<h3 id="14-使用webpack打包发布项目"><a href="#14-使用webpack打包发布项目" class="headerlink" title="14.使用webpack打包发布项目"></a>14.使用webpack打包发布项目</h3><p>在项目上线之前，我们需要将整个项目打包并发布。<br>A.配置package.json<br>    “scripts”:{<br>        “dev”:”webpack-dev-server”,<br>        “build”:”webpack -p”<br>    }<br>B.在项目打包之前，可以将dist目录删除，生成全新的dist目录</p>
<h3 id="15-Vue脚手架"><a href="#15-Vue脚手架" class="headerlink" title="15.Vue脚手架"></a>15.Vue脚手架</h3><p>Vue脚手架可以快速生成Vue项目基础的架构。<br>A.安装3.x版本的Vue脚手架：<br>    npm install -g @vue/cli<br>B.基于3.x版本的脚手架创建Vue项目：<br>    1).使用命令创建Vue项目<br>        命令：vue create my-project<br>        选择Manually select features(选择特性以创建项目)<br>        勾选特性可以用空格进行勾选。<br>        是否选用历史模式的路由：n<br>        ESLint选择：ESLint + Standard config<br>        何时进行ESLint语法校验：Lint on save<br>        babel，postcss等配置文件如何放置：In dedicated config files(单独使用文件进行配置)<br>        是否保存为模板：n<br>        使用哪个工具安装包：npm<br>    2).基于ui界面创建Vue项目<br>        命令：vue ui<br>        在自动打开的创建项目网页中配置项目信息。<br>    3).基于2.x的旧模板，创建Vue项目<br>        npm install -g @vue/cli-init<br>        vue init webpack my-project</p>
<p>C.分析Vue脚手架生成的项目结构<br>    node_modules:依赖包目录<br>    public：静态资源目录<br>    src：源码目录<br>    src/assets:资源目录<br>    src/components：组件目录<br>    src/views:视图组件目录<br>    src/App.vue:根组件<br>    src/main.js:入口js<br>    src/router.js:路由js<br>    babel.config.js:babel配置文件<br>    .eslintrc.js:</p>
<h3 id="16-Vue脚手架的自定义配置"><a href="#16-Vue脚手架的自定义配置" class="headerlink" title="16.Vue脚手架的自定义配置"></a>16.Vue脚手架的自定义配置</h3><p>​    A.通过 package.json 进行配置 [不推荐使用]<br>​        “vue”:{<br>​            “devServer”:{<br>​                “port”:”9990”,<br>​                “open”:true<br>​            }<br>​        }<br>​    B.通过单独的配置文件进行配置，创建vue.config.js<br>​        module.exports = {<br>​            devServer:{<br>​                port:8888,<br>​                open:true<br>​            }<br>​        }</p>
<h3 id="17-Element-UI的基本使用"><a href="#17-Element-UI的基本使用" class="headerlink" title="17.Element-UI的基本使用"></a>17.Element-UI的基本使用</h3><p>Element-UI:一套基于2.0的桌面端组件库<br>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a><br>A.安装：<br>    npm install element-ui -S<br>B.导入使用：<br>    import ElementUI from “element-ui”;<br>    import “element-ui/lib/theme-chalk/index.css”;</p>
<pre><code>Vue.use(ElementUI)</code></pre>]]></content>
  </entry>
  <entry>
    <title>前后端交互-接口调用方式</title>
    <url>/2020/06/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92-%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><ul>
<li><p>原生ajax</p>
</li>
<li><p>基于jQuery的ajax</p>
</li>
<li><p>fetch</p>
</li>
<li><p>axios</p>
<a id="more"></a>

</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>JavaScript的执行环境是「单线程」</li>
<li>所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li>
<li>异步模式可以一起执行<strong>多个任务</strong></li>
<li>JS中常见的异步调用<ul>
<li>定时任何</li>
<li>ajax</li>
<li>事件函数</li>
</ul>
</li>
</ul>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul>
<li>主要解决异步深层嵌套的问题</li>
<li>promise 提供了简洁的API  使得异步操作更加容易</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">   <span class="number">1.</span> <span class="built_in">Promise</span>基本使用</span></span><br><span class="line"><span class="javascript">         我们使用<span class="keyword">new</span>来构建一个<span class="built_in">Promise</span>  <span class="built_in">Promise</span>的构造函数接收一个参数，是函数，并且传入两个参数：		   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2. 这里用于实现异步任务  setTimeout</span></span></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line">      if(flag) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//3. 正常情况</span></span></span><br><span class="line"><span class="actionscript">        resolve(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="actionscript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//4. 异常情况</span></span></span><br><span class="line"><span class="actionscript">        reject(<span class="string">'出错了'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 100);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span></span></span><br><span class="line"><span class="actionscript">  p.then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="actionscript">  &#125;,<span class="function"><span class="keyword">function</span><span class="params">(info)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(info)</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line"><span class="javascript">     基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">   */</span><br><span class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">queryData</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line">    #   1.1 创建一个Promise实例</span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">       xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line">         if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">           # 1.2 处理正常的情况</span><br><span class="line">           resolve(xhr.responseText);</span><br><span class="line"><span class="actionscript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">           # 1.3 处理异常情况</span><br><span class="line"><span class="actionscript">           reject(<span class="string">'服务器错误'</span>);</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"><span class="actionscript">       xhr.open(<span class="string">'get'</span>, url);</span></span><br><span class="line"><span class="actionscript">       xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">     &#125;);</span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> p;</span></span><br><span class="line">   &#125;</span><br><span class="line"># 注意：  这里需要开启一个服务 </span><br><span class="line">   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span><br><span class="line"><span class="actionscript">   queryData(<span class="string">'http://localhost:3000/data'</span>)</span></span><br><span class="line"><span class="actionscript">     .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data)</span></span><br><span class="line">       #  1.4 想要继续链式编程下去 需要 return  </span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> queryData(<span class="string">'http://localhost:3000/data1'</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="actionscript">     .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> queryData(<span class="string">'http://localhost:3000/data2'</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="actionscript">     .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data)</span></span><br><span class="line">     &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise  基本API"></a>Promise  基本API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul>
<li>得到异步任务正确的结果</li>
</ul>
<h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul>
<li>获取异常信息</li>
</ul>
<h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul>
<li>成功与否都会执行（不是正式标准） </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>常用API-实例方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="actionscript">  <span class="comment">// console.dir(Promise);</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// resolve(123);</span></span></span><br><span class="line"><span class="actionscript">        reject(<span class="string">'error'</span>);</span></span><br><span class="line">      &#125;, 100);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="comment">// foo()</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   .then(function(data)&#123;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//     console.log(data)</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   .catch(function(data)&#123;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//     console.log(data)</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   .finally(function()&#123;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//     console.log('finished')</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// --------------------------</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 两种写法是等效的</span></span></span><br><span class="line">  foo()</span><br><span class="line"><span class="actionscript">    .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line">      # 得到异步任务正确的结果</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line">      # 获取异常信息</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    # 成功与否都会执行（不是正式标准） </span><br><span class="line"><span class="actionscript">    .finally(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'finished'</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul>
<li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定</li>
</ul>
<h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul>
<li><code>Promise.race</code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</li>
</ul>
<p>​    </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>常用API-对象方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="actionscript">  <span class="comment">// console.dir(Promise)</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">queryData</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line">        if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 处理正常的情况</span></span></span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="actionscript">          reject(<span class="string">'服务器错误'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">'get'</span>, url);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> p1 = queryData(<span class="string">'http://localhost:3000/a1'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> p2 = queryData(<span class="string">'http://localhost:3000/a2'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> p3 = queryData(<span class="string">'http://localhost:3000/a3'</span>);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">     <span class="comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(result) <span class="comment">//["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="javascript">  <span class="built_in">Promise</span>.race([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 由于p1执行较快，Promise的then()将获得结果'P1'。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result) <span class="comment">// "HELLO TOM"</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul>
<li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li>
<li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li>
<li>fetch(url, options).then(）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    Fetch API 基本用法</span><br><span class="line">    	fetch(url).then()</span><br><span class="line"><span class="javascript">   	第一个参数请求的路径   Fetch会返回<span class="built_in">Promise</span>   所以我们可以使用then 拿到请求成功的结果 </span></span><br><span class="line">  */</span><br><span class="line"><span class="actionscript">  fetch(<span class="string">'http://localhost:3000/fdata'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">  &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   在这个then里面我们能拿到最终的数据  </span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API  中的 HTTP  请求"></a>fetch API  中的 HTTP  请求</h4><ul>
<li>fetch(url, options).then(）</li>
<li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul>
<li>默认的是 GET 请求</li>
<li>需要在 options 对象中 指定对应的 method       method:请求使用的方法 </li>
<li>post 和 普通 请求的时候 需要在options 中 设置  请求头 headers   和  body</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">     /*</span><br><span class="line">           Fetch API 调用接口传递参数</span><br><span class="line">     */</span><br><span class="line">    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 </span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books?id=123'</span>, &#123;</span></span><br><span class="line">         	# get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="actionscript">             method: <span class="string">'get'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">         	# 它返回一个Promise实例对象，用于获取后台返回的数据</span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">         	# 在这个then里面我们能拿到最终的数据  </span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   </span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books/456'</span>, &#123;</span></span><br><span class="line">         	# get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="actionscript">             method: <span class="string">'get'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #2.1  DELETE请求方式参数传递      删除id  是  id=789</span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books/789'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">             method: <span class="string">'delete'</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #3 POST请求传参</span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">             method: <span class="string">'post'</span>,</span></span><br><span class="line">         	# 3.1  传递数据 </span><br><span class="line"><span class="actionscript">             body: <span class="string">'uname=lisi&amp;pwd=123'</span>,</span></span><br><span class="line">         	#  3.2  设置请求头 </span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="actionscript">                 <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    # POST请求传参</span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">             method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="javascript">             body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="actionscript">                 uname: <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="actionscript">                 pwd: <span class="string">'456'</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="actionscript">                 <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     # PUT请求传参     修改id 是 123 的 </span><br><span class="line"><span class="actionscript">     fetch(<span class="string">'http://localhost:3000/books/123'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">             method: <span class="string">'put'</span>,</span></span><br><span class="line"><span class="javascript">             body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="actionscript">                 uname: <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="actionscript">                 pwd: <span class="string">'789'</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="actionscript">                 <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="actionscript">         .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="actionscript">         &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul>
<li>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Fetch响应结果的数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fetch(<span class="string">'http://localhost:3000/json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// return data.json();   //  将获取到的数据使用 json 转换对象</span></span><br><span class="line">  <span class="keyword">return</span> data.text(); <span class="comment">//  //  将获取到的数据 转换成字符串 </span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// console.log(data.uname)</span></span><br><span class="line">  <span class="comment">// console.log(typeof data)</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">  <span class="built_in">console</span>.log(obj.uname,obj.age,obj.gender)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul>
<li>基于promise用于浏览器和node.js的http客户端</li>
<li>支持浏览器和node.js</li>
<li>支持promise</li>
<li>能拦截请求和响应</li>
<li>自动转换JSON数据</li>
<li>能转换请求和响应数据</li>
</ul>
<h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul>
<li>get和 delete请求传递参数<ul>
<li>通过传统的url  以 ? 的形式传递参数</li>
<li>restful 形式传递参数 </li>
<li>通过params  形式传递参数 </li>
</ul>
</li>
<li>post  和 put  请求传递参数<ul>
<li>通过选项传递参数</li>
<li>通过 URLSearchParams  传递参数 </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   # 1. 发送get 请求 </span><br><span class="line">axios.get(<span class="string">'http://localhost:3000/adata'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123; </span><br><span class="line">     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span><br><span class="line">     <span class="comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="built_in">console</span>.log(ret)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.  get 请求传递参数</span><br><span class="line">   # 2.1  通过传统的url  以 ? 的形式传递参数</span><br><span class="line">axios.get(<span class="string">'http://localhost:3000/axios?id=123'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">   # 2.2  restful 形式传递参数 </span><br><span class="line">   axios.get(<span class="string">'http://localhost:3000/axios/123'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.3  通过params  形式传递参数 </span><br><span class="line">   axios.get(<span class="string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="number">789</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">#3 axios delete 请求传参     传参的形式和 get 请求一样</span><br><span class="line">   axios.delete(<span class="string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="number">111</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"># 4  axios 的 post 请求</span><br><span class="line">   # 4.1  通过选项传递参数</span><br><span class="line">   axios.post(<span class="string">'http://localhost:3000/axios'</span>, &#123;</span><br><span class="line">     uname: <span class="string">'lisi'</span>,</span><br><span class="line">     pwd: <span class="number">123</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 4.2  通过 URLSearchParams  传递参数 </span><br><span class="line">   <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">   params.append(<span class="string">'uname'</span>, <span class="string">'zhangsan'</span>);</span><br><span class="line">   params.append(<span class="string">'pwd'</span>, <span class="string">'111'</span>);</span><br><span class="line">   axios.post(<span class="string">'http://localhost:3000/axios'</span>, params).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">	#5  axios put 请求传参   和 post 请求一样 </span><br><span class="line">   axios.put(<span class="string">'http://localhost:3000/axios/123'</span>, &#123;</span><br><span class="line">     uname: <span class="string">'lisi'</span>,</span><br><span class="line">     pwd: <span class="number">123</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#  配置公共的请求头 </span><br><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br><span class="line">#  配置 超时时间</span><br><span class="line">axios.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line">#  配置公共的请求头</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line"># 配置公共的 post 的 Content-Type</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul>
<li>请求拦截器<ul>
<li>请求拦截器的作用是在请求发送前进行一些操作<ul>
<li>例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</li>
</ul>
</li>
</ul>
</li>
<li>响应拦截器<ul>
<li>响应拦截器的作用是在接收到响应后进行一些操作<ul>
<li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 1. 请求拦截器 </span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(config.url)</span><br><span class="line">     # 1.1  任何请求都会经过这一步   在发送请求之前做些什么   </span><br><span class="line">     config.headers.mytoken = <span class="string">'nihao'</span>;</span><br><span class="line">     # 1.2  这里一定要return   否则配置不成功  </span><br><span class="line">     <span class="keyword">return</span> config;</span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      #1.3 对请求错误做点什么    </span><br><span class="line">     <span class="built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br><span class="line">#2. 响应拦截器 </span><br><span class="line">   axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     #2.1  在接收响应做些什么  </span><br><span class="line">     <span class="keyword">var</span> data = res.data;</span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     #2.2 对响应错误做点什么  </span><br><span class="line">     <span class="built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async  和 await"></a>async  和 await</h3><ul>
<li>async作为一个关键字放到函数前面<ul>
<li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li>
</ul>
</li>
<li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul>
<li>​    await后面可以直接跟一个 Promise实例对象</li>
<li>​     await函数不能单独使用</li>
</ul>
</li>
<li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">	# 1.  async 基础用法</span><br><span class="line">   # 1.1 async作为一个关键字放到函数前面</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     # 1.2 await关键字只能在使用async定义的函数中使用      await后面可以直接跟一个 Promise实例对象</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         resolve(<span class="string">'nihao'</span>)</span><br><span class="line">       &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"># 1.3 任何一个async函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span><br><span class="line">   queryData().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#2.  async    函数处理多个异步函数</span><br><span class="line">   axios.defaults.baseURL = <span class="string">'http://localhost:3000'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> info = <span class="keyword">await</span> axios.get(<span class="string">'async1'</span>);</span><br><span class="line">     #2.2  让异步代码看起来、表现起来更像同步代码</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.get(<span class="string">'async2?info='</span> + info.data);</span><br><span class="line">     <span class="keyword">return</span> ret.data;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   queryData().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="图书列表案例"><a href="#图书列表案例" class="headerlink" title="图书列表案例"></a>图书列表案例</h3><h4 id="1-基于接口案例-获取图书列表"><a href="#1-基于接口案例-获取图书列表" class="headerlink" title="1. 基于接口案例-获取图书列表"></a>1. 基于接口案例-获取图书列表</h4><ul>
<li>导入axios   用来发送ajax </li>
<li>把获取到的数据渲染到页面上 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- 5.  把books  中的数据渲染到页面上   --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">1.  导入axios   </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">       /*</span><br><span class="line">            图书管理-添加图书</span><br><span class="line">        */</span><br><span class="line">       # 2   配置公共的url地址  简化后面的调用方式</span><br><span class="line"><span class="actionscript">       axios.defaults.baseURL = <span class="string">'http://localhost:3000/'</span>;</span></span><br><span class="line"><span class="actionscript">       axios.interceptors.response.use(<span class="function"><span class="keyword">function</span><span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">return</span> res.data;</span></span><br><span class="line"><span class="actionscript">       &#125;, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(error)</span></span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">               submitFlag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">               id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">               name: <span class="string">''</span>,</span></span><br><span class="line">               books: []</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               # 3 定义一个方法 用来发送 ajax </span><br><span class="line">               # 3.1  使用 async  来 让异步的代码  以同步的形式书写 </span><br><span class="line"><span class="javascript">               queryData: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 调用后台接口获取图书列表数据</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// var ret = await axios.get('books');</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// this.books = ret.data;</span></span></span><br><span class="line">				# 3.2  发送ajax请求  把拿到的数据放在books 里面   </span><br><span class="line"><span class="javascript">                   <span class="keyword">this</span>.books = <span class="keyword">await</span> axios.get(<span class="string">'books'</span>);</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">           mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">			#  4 mounted  里面 DOM已经加载完毕  在这里调用函数  </span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.queryData();</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-添加图书"><a href="#2-添加图书" class="headerlink" title="2   添加图书"></a>2   添加图书</h4><ul>
<li>获取用户输入的数据   发送到后台</li>
<li>渲染最新的数据到页面上</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   handle: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>.flag) &#123;</span><br><span class="line">           <span class="comment">// 编辑图书</span></span><br><span class="line">           <span class="comment">// 就是根据当前的ID去更新数组中对应的数据</span></span><br><span class="line">           <span class="keyword">this</span>.books.some(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">if</span>(item.id == <span class="keyword">this</span>.id) &#123;</span><br><span class="line">               item.name = <span class="keyword">this</span>.name;</span><br><span class="line">               <span class="comment">// 完成更新操作之后，需要终止循环</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           # 1.1  在前面封装好的 handle 方法中  发送ajax请求  </span><br><span class="line">           # 1.2  使用async  和 await 简化操作 需要在 function 前面添加 async   </span><br><span class="line">           <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.post(<span class="string">'books'</span>, &#123;</span><br><span class="line">             name: <span class="keyword">this</span>.name</span><br><span class="line">           &#125;)</span><br><span class="line">           # 1.3  根据后台返回的状态码判断是否加载数据 </span><br><span class="line">           <span class="keyword">if</span>(ret.status == <span class="number">200</span>) &#123;</span><br><span class="line">            # 1.4  调用 queryData 这个方法  渲染最新的数据 </span><br><span class="line">             <span class="keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 清空表单</span></span><br><span class="line">         <span class="keyword">this</span>.id = <span class="string">''</span>;</span><br><span class="line">         <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">       &#125;,        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-验证图书名称是否存在"><a href="#3-验证图书名称是否存在" class="headerlink" title="3  验证图书名称是否存在"></a>3  验证图书名称是否存在</h4><ul>
<li>添加图书之前发送请求验证图示是否已经存在</li>
<li>如果不存在 往后台里面添加图书名称<ul>
<li>图书存在与否只需要修改submitFlag的值即可</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> watch: &#123;</span><br><span class="line">        name: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 验证图书名称是否已经存在</span></span><br><span class="line">          <span class="comment">// var flag = this.books.some(function(item)&#123;</span></span><br><span class="line">          <span class="comment">//   return item.name == val;</span></span><br><span class="line">          <span class="comment">// &#125;);</span></span><br><span class="line">          <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.get(<span class="string">'/books/book/'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">          <span class="keyword">if</span>(ret.status == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 图书名称存在</span></span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">true</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 图书名称不存在</span></span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="4-编辑图书"><a href="#4-编辑图书" class="headerlink" title="4.  编辑图书"></a>4.  编辑图书</h4><ul>
<li>根据当前书的id 查询需要编辑的书籍</li>
<li>需要根据状态位判断是添加还是编辑 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">       handle: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>.flag) &#123;</span><br><span class="line">           #4.3 编辑图书   把用户输入的信息提交到后台</span><br><span class="line">           <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.put(<span class="string">'books/'</span> + <span class="keyword">this</span>.id, &#123;</span><br><span class="line">             name: <span class="keyword">this</span>.name</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">if</span>(ret.status == <span class="number">200</span>)&#123;</span><br><span class="line">             #4.4  完成添加后 重新加载列表数据</span><br><span class="line">             <span class="keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 添加图书</span></span><br><span class="line">           <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.post(<span class="string">'books'</span>, &#123;</span><br><span class="line">             name: <span class="keyword">this</span>.name</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">if</span>(ret.status == <span class="number">200</span>) &#123;</span><br><span class="line">             <span class="comment">// 重新加载列表数据</span></span><br><span class="line">             <span class="keyword">this</span>.queryData();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 清空表单</span></span><br><span class="line">         <span class="keyword">this</span>.id = <span class="string">''</span>;</span><br><span class="line">         <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">       toEdit: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">         #4.1  flag状态位用于区分编辑和添加操作</span><br><span class="line">         <span class="keyword">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line">         #4.2  根据id查询出对应的图书信息  页面中可以加载出来最新的信息</span><br><span class="line">         # 调用接口发送ajax 请求  </span><br><span class="line">         <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.get(<span class="string">'books/'</span> + id);</span><br><span class="line">         <span class="keyword">this</span>.id = ret.id;</span><br><span class="line">         <span class="keyword">this</span>.name = ret.name;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="5-删除图书"><a href="#5-删除图书" class="headerlink" title="5 删除图书"></a>5 删除图书</h4><ul>
<li>把需要删除的id书籍 通过参数的形式传递到后台</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">deleteBook: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">       <span class="comment">// 删除图书</span></span><br><span class="line">       <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.delete(<span class="string">'books/'</span> + id);</span><br><span class="line">       <span class="keyword">if</span>(ret.status == <span class="number">200</span>) &#123;</span><br><span class="line">         <span class="comment">// 重新加载列表数据</span></span><br><span class="line">         <span class="keyword">this</span>.queryData();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Vue常用特性</title>
    <url>/2020/06/06/Vue%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h3><ul>
<li><p>获取单选框中的值</p>
<ul>
<li><p>通过v-model</p>
<a id="more"></a>

</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、 两个单选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">        2、 每一个单选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		gender 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">'gender'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">v-model</span>=<span class="string">'gender'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="actionscript">             <span class="comment">// 默认会让当前的 value 值为 2 的单选框选中</span></span></span><br><span class="line">                gender: 2,  </span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取复选框中的值</p>
<ul>
<li>通过v-model</li>
<li>和获取单选框中的值一样 </li>
<li>复选框 <code>checkbox</code> 这种的组合时   data 中的 hobby 我们要定义成数组 否则无法实现多选</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、 复选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">        2、 每一个复选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		hobby 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"ball"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"ball"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"sing"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">v-model</span>=<span class="string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sing"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"code"</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">v-model</span>=<span class="string">'hobby'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"code"</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 默认会让当前的 value 值为 2 和 3 的复选框选中</span></span></span><br><span class="line"><span class="actionscript">                hobby: [<span class="string">'2'</span>, <span class="string">'3'</span>],</span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取下拉框和文本框中的值</p>
<ul>
<li>通过v-model</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>职业：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			1、 需要给select  通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">            2、 每一个option  必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		    3、 当某一个option选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment">		     occupation 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- multiple  多选 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">'occupation'</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择职业...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>软件工程师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>律师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- textarea 是 一个双标签   不需要绑定value 属性的  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">'desc'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 默认会让当前的 value 值为 2 和 3 的下拉框选中</span></span></span><br><span class="line"><span class="actionscript">                 occupation: [<span class="string">'2'</span>, <span class="string">'3'</span>],</span></span><br><span class="line"><span class="actionscript">             	 desc: <span class="string">'nihao'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><ul>
<li><p>.number  转换为数值</p>
<ul>
<li>注意点：    </li>
<li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li>
<li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li>
</ul>
</li>
<li><p>.trim  自动过滤用户输入的首尾空白字符</p>
<ul>
<li>只能去掉首尾的 不能去除中间的空格</li>
</ul>
</li>
<li><p>.lazy   将input事件切换成change事件</p>
<ul>
<li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li>
</ul>
</li>
<li><p>在失去焦点 或者 按下回车键时才更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul>
<li>内置指令不能满足我们特殊的需求</li>
<li>Vue允许我们自定义指令</li>
</ul>
<h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive  注册全局指令"></a>Vue.directive  注册全局指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  使用自定义的指令，只需在对用的元素中，加上'v-'的前缀形成类似于内部指令'v-if'，'v-text'的形式。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注意点： </span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive('focusA',function()&#123;&#125;) </span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  	<span class="comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span></span><br><span class="line"><span class="actionscript">  	inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    		<span class="comment">// 聚焦元素</span></span></span><br><span class="line">    		el.focus();</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">　　el:<span class="string">'#app'</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive  注册全局指令 带参数"></a>Vue.directive  注册全局指令 带参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-color</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     自定义指令-带参数</span><br><span class="line">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"><span class="actionscript">   Vue.directive(<span class="string">'color'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">     <span class="comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">// el 为当前自定义指令的DOM元素  </span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span></span><br><span class="line"><span class="actionscript">     bind: <span class="function"><span class="keyword">function</span><span class="params">(el, binding)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 根据指令的参数设置背景色</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// console.log(binding.value.color)</span></span></span><br><span class="line">       el.style.backgroundColor = binding.value.color;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       msg: &#123;</span><br><span class="line"><span class="actionscript">         color: <span class="string">'blue'</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义指令局部指令"><a href="#自定义指令局部指令" class="headerlink" title="自定义指令局部指令"></a>自定义指令局部指令</h4><ul>
<li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li>
<li>局部指令只能在当前组件里面使用</li>
<li>当全局指令和局部指令同名时以局部指令为准</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-color</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      自定义指令-局部指令</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line"><span class="actionscript">          color: <span class="string">'red'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">   	  <span class="comment">//局部指令，需要定义在  directives 的选项</span></span></span><br><span class="line">      directives: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line"><span class="actionscript">          bind: <span class="function"><span class="keyword">function</span><span class="params">(el, binding)</span></span>&#123;</span></span><br><span class="line">            el.style.backgroundColor = binding.value.color;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        focus: &#123;</span><br><span class="line"><span class="actionscript">          inserted: <span class="function"><span class="keyword">function</span><span class="params">(el)</span> </span>&#123;</span></span><br><span class="line">            el.focus();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性   computed"></a>计算属性   computed</h3><ul>
<li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li>
<li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li>
<li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">       当多次调用 reverseString  的时候 </span></span><br><span class="line"><span class="comment">       只要里面的 num 值不改变 他会把第一次计算的结果直接返回</span></span><br><span class="line"><span class="comment">	直到data 中的num值改变 计算属性才会重新发生计算</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span><br><span class="line">   */</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="actionscript">       msg: <span class="string">'Nihao'</span>,</span></span><br><span class="line">       num: 100</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       reverseMessage: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'methods'</span>)</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="actionscript">     <span class="comment">//computed  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">     computed: &#123;</span><br><span class="line"><span class="actionscript">       <span class="comment">//  reverseString   这个是我们自己定义的名字 </span></span></span><br><span class="line"><span class="actionscript">       reverseString: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'computed'</span>)</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//  当data 中的 num 的值改变的时候  reverseString  会自动发生计算  </span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="keyword">this</span>.num;i++)&#123;</span></span><br><span class="line">           total += i;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="actionscript">         <span class="comment">// 这里一定要有return 否则 调用 reverseString 的 时候无法拿到结果    </span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">return</span> total;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h3><ul>
<li>使用watch来响应数据的变化</li>
<li>一般用于异步或者开销较大的操作</li>
<li>watch 中的属性 一定是data 中 已经存在的数据 </li>
<li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'firstName'</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'lastName'</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">       /*</span><br><span class="line">             侦听器</span><br><span class="line">           */</span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               firstName: <span class="string">'Jim'</span>,</span></span><br><span class="line"><span class="actionscript">               lastName: <span class="string">'Green'</span>,</span></span><br><span class="line"><span class="actionscript">               <span class="comment">// fullName: 'Jim Green'</span></span></span><br><span class="line">           &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">//watch  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">           watch: &#123;</span><br><span class="line"><span class="actionscript">               <span class="comment">//   注意：  这里firstName  对应着data 中的 firstName </span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//   当 firstName 值 改变的时候  会自动触发 watch</span></span></span><br><span class="line"><span class="actionscript">               firstName: <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               <span class="comment">//   注意：  这里 lastName 对应着data 中的 lastName </span></span></span><br><span class="line"><span class="actionscript">               lastName: <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul>
<li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。</li>
<li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li>
<li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li>
<li>支持级联操作</li>
<li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li>
<li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">      支持级联操作</span></span><br><span class="line"><span class="comment">      upper  被定义为接收单个参数的过滤器函数，表达式msg 的值将作为参数传入到函数中。</span></span><br><span class="line"><span class="comment">	  然后继续调用同样被定义为接收单个参数的过滤器 lower ，将upper 的结果传递到lower中</span></span><br><span class="line"><span class="comment"> 	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:abc</span>=<span class="string">'msg | upper'</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//  lower  为全局过滤器     </span></span></span><br><span class="line"><span class="actionscript">   Vue.filter(<span class="string">'lower'</span>, <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toLowerCase() + val.slice(<span class="number">1</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">       <span class="comment">//filters  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//  定义filters 中的过滤器为局部过滤器 </span></span></span><br><span class="line">      filters: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//   upper  自定义的过滤器名字 </span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span></span></span><br><span class="line"><span class="actionscript">        upper: <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	filterA 被定义为接收三个参数的过滤器函数。</span></span><br><span class="line"><span class="comment">			其中 message 的值作为第一个参数，</span></span><br><span class="line"><span class="comment">	普通字符串 'arg1' 作为第二个参数，表达式 arg2 的值作为第三个参数。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">      &#123;&#123; message | filterA('arg1', 'arg2') &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span><br><span class="line"><span class="actionscript">      Vue.filter(<span class="string">'filterA'</span>,<span class="function"><span class="keyword">function</span><span class="params">(n,a,b)</span></span>&#123;</span></span><br><span class="line">          if(n&lt;10)&#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> n+a;</span></span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> n+b;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#box"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">              message: <span class="string">"哈哈哈"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li>事物从出生到死亡的过程</li>
<li>Vue实例从创建 到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数</li>
</ul>
<p>####常用的 钩子函数</p>
<table>
<thead>
<tr>
<th>beforeCreate</th>
<th>在实例初始化之后，数据观测和事件配置之前被调用 此时data 和 methods 以及页面的DOM结构都没有初始化   什么都做不了</th>
</tr>
</thead>
<tbody><tr>
<td>created</td>
<td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td>
</tr>
<tr>
<td>mounted</td>
<td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td>
</tr>
<tr>
<td>updated</td>
<td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>实例销毁之前调用</td>
</tr>
<tr>
<td>destroyed</td>
<td>实例销毁后调用</td>
</tr>
</tbody></table>
<h3 id="数组变异方法"><a href="#数组变异方法" class="headerlink" title="数组变异方法"></a>数组变异方法</h3><ul>
<li>在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变</li>
<li>变异数组方法即保持数组方法原有功能不变的前提下对其进行功能拓展</li>
</ul>
<table>
<thead>
<tr>
<th><code>push()</code></th>
<th>往数组最后面添加一个元素，成功返回当前数组的长度</th>
</tr>
</thead>
<tbody><tr>
<td><code>pop()</code></td>
<td>删除数组的最后一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td><code>shift()</code></td>
<td>删除数组的第一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td><code>unshift()</code></td>
<td>往数组最前面添加一个元素，成功返回当前数组的长度</td>
</tr>
<tr>
<td><code>splice()</code></td>
<td>有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选），第三个是删除 后想要在原位置替换的值</td>
</tr>
<tr>
<td><code>sort()</code></td>
<td>sort()  使数组按照字符编码默认从小到大排序,成功返回排序后的数组</td>
</tr>
<tr>
<td><code>reverse()</code></td>
<td>reverse()  将数组倒序，成功返回倒序后的数组</td>
</tr>
</tbody></table>
<h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul>
<li>不会改变原始数组，但总是返回一个新数组</li>
</ul>
<table>
<thead>
<tr>
<th>filter</th>
<th>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</th>
</tr>
</thead>
<tbody><tr>
<td>concat</td>
<td>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组</td>
</tr>
<tr>
<td>slice</td>
<td>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组</td>
</tr>
</tbody></table>
<h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul>
<li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li>
<li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li>
</ul>
<h3 id="图书列表案例"><a href="#图书列表案例" class="headerlink" title="图书列表案例"></a>图书列表案例</h3><ul>
<li>静态列表效果</li>
<li>基于数据实现模板效果</li>
<li>处理每行的操作按钮</li>
</ul>
<h4 id="1、-提供的静态数据"><a href="#1、-提供的静态数据" class="headerlink" title="1、 提供的静态数据"></a>1、 提供的静态数据</h4><ul>
<li>数据存放在vue 中 data 属性中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: <span class="number">1</span>,</span><br><span class="line">         name: <span class="string">'三国演义'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">2</span>,</span><br><span class="line">         name: <span class="string">'水浒传'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">3</span>,</span><br><span class="line">         name: <span class="string">'红楼梦'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">4</span>,</span><br><span class="line">         name: <span class="string">'西游记'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;); <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: <span class="number">1</span>,</span><br><span class="line">         name: <span class="string">'三国演义'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">2</span>,</span><br><span class="line">         name: <span class="string">'水浒传'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">3</span>,</span><br><span class="line">         name: <span class="string">'红楼梦'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: <span class="number">4</span>,</span><br><span class="line">         name: <span class="string">'西游记'</span>,</span><br><span class="line">         date: <span class="string">''</span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2、-把提供好的数据渲染到页面上"><a href="#2、-把提供好的数据渲染到页面上" class="headerlink" title="2、 把提供好的数据渲染到页面上"></a>2、 把提供好的数据渲染到页面上</h4><ul>
<li>利用 v-for循环 遍历 books 将每一项数据渲染到对应的数据中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 对应的id 渲染到页面上 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应的name 渲染到页面上 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 阻止 a 标签的默认跳转 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       	  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、-添加图书"><a href="#3、-添加图书" class="headerlink" title="3、 添加图书"></a>3、 添加图书</h4><ul>
<li>通过双向绑定获取到输入框中的输入内容 </li>
<li>给按钮添加点击事件 </li>
<li>把输入框中的数据存储到 data 中的 books  里面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           编号：</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 3.1、通过双向绑定获取到输入框中的输入的 id  --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">'id'</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">           名称：</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 3.2、通过双向绑定获取到输入框中的输入的 name  --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3.3、给按钮添加点击事件  --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      图书管理-添加图书</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">''</span>,</span></span><br><span class="line">        books: [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'三国演义'</span>,</span></span><br><span class="line"><span class="actionscript">          date: <span class="string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'水浒传'</span>,</span></span><br><span class="line"><span class="actionscript">          date: <span class="string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'红楼梦'</span>,</span></span><br><span class="line"><span class="actionscript">          date: <span class="string">''</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 4,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'西游记'</span>,</span></span><br><span class="line"><span class="actionscript">          date: <span class="string">''</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 3.4 定义一个新的对象book 存储 获取到输入框中 书 的id和名字 </span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">          book.id = <span class="keyword">this</span>.id;</span></span><br><span class="line"><span class="actionscript">          book.name = <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="actionscript">          book.date = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 3.5 把book  通过数组的变异方法 push 放到    books 里面</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//3.6 清空输入框</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.id = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.name = <span class="string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-修改图书-上"><a href="#4-修改图书-上" class="headerlink" title="4 修改图书-上"></a>4 修改图书-上</h4><ul>
<li>点击修改按钮的时候 获取到要修改的书籍名单<ul>
<li>4.1  给修改按钮添加点击事件，  需要把当前的图书的id 传递过去 这样才知道需要修改的是哪一本书籍</li>
</ul>
</li>
<li>把需要修改的书籍名单填充到表单里面<ul>
<li>4.2  根据传递过来的id 查出books 中 对应书籍的详细信息</li>
<li>4.3 把获取到的信息填充到表单</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">             编号：</span><br><span class="line">           <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">'id'</span> <span class="attr">:disabled</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">             名称：</span><br><span class="line">           <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--- </span></span><br><span class="line"><span class="comment">			4.1  给修改按钮添加点击事件，  需要把当前的图书的id 传递过去 </span></span><br><span class="line"><span class="comment">			这样才知道需要修改的是哪一本书籍</span></span><br><span class="line"><span class="comment"> 				---&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'toEdit(item.id)'</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     图书管理-添加图书</span><br><span class="line">   */</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="actionscript">       flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">       id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">       name: <span class="string">''</span>,</span></span><br><span class="line">       books: [&#123;</span><br><span class="line">         id: 1,</span><br><span class="line"><span class="actionscript">         name: <span class="string">'三国演义'</span>,</span></span><br><span class="line"><span class="actionscript">         date: <span class="string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 2,</span><br><span class="line"><span class="actionscript">         name: <span class="string">'水浒传'</span>,</span></span><br><span class="line"><span class="actionscript">         date: <span class="string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 3,</span><br><span class="line"><span class="actionscript">         name: <span class="string">'红楼梦'</span>,</span></span><br><span class="line"><span class="actionscript">         date: <span class="string">''</span></span></span><br><span class="line">       &#125;,&#123;</span><br><span class="line">         id: 4,</span><br><span class="line"><span class="actionscript">         name: <span class="string">'西游记'</span>,</span></span><br><span class="line"><span class="actionscript">         date: <span class="string">''</span></span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 3.4 定义一个新的对象book 存储 获取到输入框中 书 的id和名字 </span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">         book.id = <span class="keyword">this</span>.id;</span></span><br><span class="line"><span class="actionscript">         book.name = <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="actionscript">         book.date = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.5 把book  通过数组的变异方法 push 放到    books 里面</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//3.6 清空输入框</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.id = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.name = <span class="string">''</span>;</span></span><br><span class="line">       &#125;,</span><br><span class="line"><span class="actionscript">       toEdit: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(id)</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//4.2  根据传递过来的id 查出books 中 对应书籍的详细信息</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">return</span> item.id == id;</span></span><br><span class="line">         &#125;);</span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(book)</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//4.3 把获取到的信息填充到表单</span></span></span><br><span class="line"><span class="actionscript">         <span class="comment">// this.id   和  this.name 通过双向绑定 绑定到了表单中  一旦数据改变视图自动更新</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.id = book[<span class="number">0</span>].id;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.name = book[<span class="number">0</span>].name;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-修改图书-下"><a href="#5-修改图书-下" class="headerlink" title="5  修改图书-下"></a>5  修改图书-下</h4><ul>
<li>5.1  定义一个标识符， 主要是控制 编辑状态下当前编辑书籍的id 不能被修改 即 处于编辑状态下 当前控制书籍编号的输入框禁用  </li>
<li>5.2  通过属性绑定给书籍编号的 绑定 disabled 的属性  flag 为 true 即为禁用</li>
<li>5.3  flag 默认值为false   处于编辑状态 要把 flag 改为true 即当前表单为禁用 </li>
<li>5.4  复用添加方法   用户点击提交的时候依然执行 handle 中的逻辑如果 flag为true 即 表单处于不可输入状态 此时执行的用户编辑数据数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">              编号：</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 5.2 通过属性绑定 绑定 disabled 的属性  flag 为 true 即为禁用      --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">'id'</span> <span class="attr">:disabled</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">              名称：</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'toEdit(item.id)'</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">/*图书管理-添加图书*/</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 5.1  定义一个标识符， 主要是控制 编辑状态下当前编辑书籍的id 不能被修改 </span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 即 处于编辑状态下 当前控制书籍编号的输入框禁用 </span></span></span><br><span class="line"><span class="actionscript">                flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                name: <span class="string">''</span>,</span></span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                handle: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">                   /*</span><br><span class="line">                     5.4  复用添加方法   用户点击提交的时候依然执行 handle 中的逻辑</span><br><span class="line"><span class="actionscript">                 		 如果 flag为<span class="literal">true</span> 即 表单处于不可输入状态 此时执行的用户编辑数据数据	</span></span><br><span class="line">                   */ </span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.flag) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 编辑图书</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 5.5  根据当前的ID去更新数组中对应的数据  </span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.books.some(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">if</span> (item.id == <span class="keyword">this</span>.id) &#123;</span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// 箭头函数中 this 指向父级作用域的this </span></span></span><br><span class="line"><span class="actionscript">                                item.name = <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// 完成更新操作之后，需要终止循环</span></span></span><br><span class="line"><span class="actionscript">                                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="actionscript">                        <span class="comment">// 5.6 编辑完数据后表单要处以可以输入的状态</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//  5.7  如果 flag为false  表单处于输入状态 此时执行的用户添加数据    </span></span></span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> book = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">                        book.id = <span class="keyword">this</span>.id;</span></span><br><span class="line"><span class="actionscript">                        book.name = <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="actionscript">                        book.date = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.books.push(book);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 清空表单</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.id = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.name = <span class="string">''</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 清空表单</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.id = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.name = <span class="string">''</span>;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                toEdit: <span class="function"><span class="keyword">function</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line">                     /*</span><br><span class="line"><span class="actionscript">                     <span class="number">5.3</span>  flag 默认值为<span class="literal">false</span>   处于编辑状态 要把 flag 改为<span class="literal">true</span> 即当前表单为禁					  用 </span></span><br><span class="line">                     */ </span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(id)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> item.id == id;</span></span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(book)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.id = book[<span class="number">0</span>].id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.name = book[<span class="number">0</span>].name;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-删除图书"><a href="#6-删除图书" class="headerlink" title="6 删除图书"></a>6 删除图书</h4><ul>
<li>6.1 给删除按钮添加事件 把当前需要删除的书籍id 传递过来</li>
<li>6.2 根据id从数组中查找元素的索引</li>
<li>6.3 根据索引删除数组元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'toEdit(item.id)'</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  6.1 给删除按钮添加事件 把当前需要删除的书籍id 传递过来  --&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'deleteBook(item.id)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      图书管理-添加图书</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        deleteBook: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 删除图书</span></span></span><br><span class="line">          #// 6.2 根据id从数组中查找元素的索引</span><br><span class="line"><span class="actionscript">          <span class="comment">// var index = this.books.findIndex(function(item)&#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   return item.id == id;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// &#125;);</span></span></span><br><span class="line">          #// 6.3 根据索引删除数组元素</span><br><span class="line"><span class="actionscript">          <span class="comment">// this.books.splice(index, 1);</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// -------------------------</span></span></span><br><span class="line">         #// 方法二：通过filter方法进行删除</span><br><span class="line">		</span><br><span class="line">          # 6.4  根据filter 方法 过滤出来id 不是要删除书籍的id </span><br><span class="line">          # 因为 filter 是替换数组不会修改原始数据 所以需要 把 不是要删除书籍的id  赋值给 books </span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.books = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> item.id != id;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="常用特性应用场景"><a href="#常用特性应用场景" class="headerlink" title="常用特性应用场景"></a>常用特性应用场景</h3><h4 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1 过滤器"></a>1 过滤器</h4><ul>
<li>Vue.filter  定义一个全局过滤器</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     		<span class="comment">&lt;!-- 1.3  调用过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date | format('yyyy-MM-dd hh:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'toEdit(item.id)'</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'deleteBook(item.id)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    	#1.1  Vue.filter  定义一个全局过滤器</span><br><span class="line"><span class="actionscript">	    Vue.filter(<span class="string">'format'</span>, <span class="function"><span class="keyword">function</span><span class="params">(value, arg)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span><span class="params">(date, format)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">"string"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> mts = date.match(<span class="regexp">/(\/Date\((\d+)\)\/)/</span>);</span></span><br><span class="line">                  if (mts &amp;&amp; mts.length &gt;= 3) &#123;</span><br><span class="line"><span class="javascript">                    date = <span class="built_in">parseInt</span>(mts[<span class="number">2</span>]);</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (!date || date.toUTCString() == <span class="string">"Invalid Date"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> map = &#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="string">"M"</span>: date.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span></span><br><span class="line"><span class="actionscript">                  <span class="string">"d"</span>: date.getDate(), <span class="comment">//日 </span></span></span><br><span class="line"><span class="actionscript">                  <span class="string">"h"</span>: date.getHours(), <span class="comment">//小时 </span></span></span><br><span class="line"><span class="actionscript">                  <span class="string">"m"</span>: date.getMinutes(), <span class="comment">//分 </span></span></span><br><span class="line"><span class="actionscript">                  <span class="string">"s"</span>: date.getSeconds(), <span class="comment">//秒 </span></span></span><br><span class="line"><span class="javascript">                  <span class="string">"q"</span>: <span class="built_in">Math</span>.floor((date.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span></span><br><span class="line"><span class="actionscript">                  <span class="string">"S"</span>: date.getMilliseconds() <span class="comment">//毫秒 </span></span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                format = format.replace(<span class="regexp">/([yMdhmsqS])+/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">all, t</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">var</span> v = map[t];</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) &#123;</span></span><br><span class="line">                    if (all.length &gt; 1) &#123;</span><br><span class="line"><span class="actionscript">                      v = <span class="string">'0'</span> + v;</span></span><br><span class="line">                      v = v.substr(v.length - 2);</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> v;</span></span><br><span class="line"><span class="actionscript">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t === <span class="string">'y'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - all.length);</span></span><br><span class="line">                  &#125;</span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> all;</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> format;</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> dateFormat(value, arg);</span></span><br><span class="line">            &#125;)</span><br><span class="line">#1.2  提供的数据 包含一个时间戳   为毫秒数</span><br><span class="line">   [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'三国演义'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'水浒传'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'红楼梦'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 4,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'西游记'</span>,</span></span><br><span class="line">          date: 2525609975000</span><br><span class="line">        &#125;];</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2 自定义指令"></a>2 自定义指令</h4><ul>
<li>让表单自动获取焦点</li>
<li>通过Vue.directive 自定义指定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.2  通过v-自定义属性名 调用自定义指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">'id'</span> <span class="attr">:disabled</span>=<span class="string">"flag"</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    # 2.1   通过Vue.directive 自定义指定</span><br><span class="line"><span class="actionscript">	Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3 计算属性"></a>3 计算属性</h4><ul>
<li>通过计算属性计算图书的总数<ul>
<li>图书的总数就是计算数组的长度 </li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>图书总数：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     	<span class="comment">&lt;!-- 3.2 在页面上 展示出来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        submitFlag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">''</span>,</span></span><br><span class="line">        books: []</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="actionscript">        total: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 3.1  计算图书的总数</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.books.length;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4 生命周期"></a>4 生命周期</h4>]]></content>
  </entry>
  <entry>
    <title>Vue组件</title>
    <url>/2020/06/06/Vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li><p>组件 (Component) 是 Vue.js 最强大的功能之一</p>
</li>
<li><p>组件可以扩展 HTML 元素，封装可重用的代码</p>
<a id="more"></a>

</li>
</ul>
<h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><ul>
<li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li>
<li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li>
</ul>
<h5 id="组件基础用"><a href="#组件基础用" class="headerlink" title="组件基础用"></a>组件基础用</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   注册组件 </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#example'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h5><ul>
<li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li>
<li>组件模板必须是单个根元素</li>
<li>组件模板的内容可以是模板字符串</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="comment">	      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="comment">		  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="comment">	--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="actionscript">     Vue.component(<span class="string">'HelloWorld'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          msg: <span class="string">'HelloWorld'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="actionscript">      data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          count: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>点击了</span><span class="template-variable">&#123;&#123;count&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>测试123<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line">			#  6 在字符串模板中可以使用驼峰的方式使用组件	</span><br><span class="line"><span class="handlebars"><span class="xml">		   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.count += <span class="number">2</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><ul>
<li>只能在当前注册它的vue实例中使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//局部注册组件  </span></span></span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="actionscript">        <span class="string">'my-component'</span>: Child</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Vue-调试工具"><a href="#Vue-调试工具" class="headerlink" title="Vue 调试工具"></a>Vue 调试工具</h3><h3 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><ul>
<li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li>
<li>然后子组件用属性props接收</li>
<li>在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">'来自父组件的值'</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="comment">	  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">'ptitle'</span> <span class="attr">content</span>=<span class="string">'hello'</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'menu-item'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">     <span class="comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'title'</span>, <span class="string">'content'</span>],</span></span><br><span class="line"><span class="actionscript">     data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">         msg: <span class="string">'子组件本身的数据'</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">     template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg + "----" + title + "-----" + content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="actionscript">       pmsg: <span class="string">'父组件中内容'</span>,</span></span><br><span class="line"><span class="actionscript">       ptitle: <span class="string">'动态绑定属性'</span></span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><ul>
<li>子组件用<code>$emit()</code>触发事件</li>
<li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li>
<li>父组件用v-on 监听子组件的事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">'&#123;fontSize: fontSize + "px"&#125;'</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="comment">	这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数	</span></span><br><span class="line"><span class="comment">--&gt;</span>	</span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:parr</span>=<span class="string">'parr'</span> @<span class="attr">enlarge-text</span>=<span class="string">'handle($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     子组件向父组件传值-携带参数</span><br><span class="line">   */</span><br><span class="line">   </span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'menu-item'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'parr'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'index'</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in parr'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">		###  1、子组件用$emit()触发事件</span><br><span class="line">		### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'$emit("enlarge-text", 5)'</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'$emit("enlarge-text", 10)'</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="actionscript">       pmsg: <span class="string">'父组件中内容'</span>,</span></span><br><span class="line"><span class="actionscript">       parr: [<span class="string">'apple'</span>,<span class="string">'orange'</span>,<span class="string">'banana'</span>],</span></span><br><span class="line">       fontSize: 10</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       handle: <span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 扩大字体大小</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.fontSize += val;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h4><ul>
<li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul>
<li>提供事件中心    var hub = new Vue()</li>
</ul>
</li>
<li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li>
<li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li>
<li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>销毁事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">test-tom</span>&gt;</span><span class="tag">&lt;/<span class="name">test-tom</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">test-jerry</span>&gt;</span><span class="tag">&lt;/<span class="name">test-jerry</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     兄弟组件之间数据传递</span><br><span class="line">   */</span><br><span class="line"><span class="actionscript">   <span class="comment">//1、 提供事件中心</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> hub = <span class="keyword">new</span> Vue();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'test-tom'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">     data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>TOM:</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="actionscript">         hub.$emit(<span class="string">'jerry-event'</span>, <span class="number">2</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="actionscript">     mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on(方法名</span></span></span><br><span class="line"><span class="actionscript">       hub.$on(<span class="string">'tom-event'</span>, (val) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'test-jerry'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">     data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>JERRY:</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handle'</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="actionscript">         hub.$emit(<span class="string">'tom-event'</span>, <span class="number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="actionscript">     mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on()方法名</span></span></span><br><span class="line"><span class="actionscript">       hub.$on(<span class="string">'jerry-event'</span>, (val) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       </span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       handle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  </span></span></span><br><span class="line"><span class="actionscript">         hub.$off(<span class="string">'tom-event'</span>);</span></span><br><span class="line"><span class="actionscript">         hub.$off(<span class="string">'jerry-event'</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><ul>
<li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li>
</ul>
<h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有一个警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      组件插槽：父组件向子组件传递内容</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'alert-box'</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		# 当组件渲染的时候，这个 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span></span><br><span class="line">		# 插槽内可以包含任何模板代码，包括 HTML</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><ul>
<li>具有名字的插槽 </li>
<li>使用 <slot> 中的 “name” 属性绑定元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="comment">				如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">'header'</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">'footer'</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'header'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'footer'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      具名插槽</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'base-layout'</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			###	1、 使用 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 中的 "name" 属性绑定元素 指定当前插槽的名字</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'header'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line">			###  注意点： </span><br><span class="line">			###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'footer'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><ul>
<li>父组件对子组件加工处理</li>
<li>既可以复用子组件的slot，又可以使slot内容不一致</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span></span><br><span class="line"><span class="comment">		但样式希望不一样 这个时候我们需要使用作用域插槽 </span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope="slotProps",</span></span><br><span class="line"><span class="comment">			slotProps在这里只是临时变量   </span></span><br><span class="line"><span class="comment">		---&gt;</span> 	</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">'slotProps'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">'slotProps.info.id==3'</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></span><br><span class="line">            &#123;&#123;slotProps.info.name&#125;&#125;		         </span><br><span class="line">         <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      作用域插槽</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'fruit-list'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in list'</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			###  3、 在子组件模板中,<span class="tag">&lt;<span class="name">slot</span>&gt;</span>元素上有一个类似props传递数据给组件的写法msg="xxx",</span></span></span><br><span class="line">			###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。</span><br><span class="line">					如果父组件为这个插槽提供了内容，则默认的内容会被替换掉</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">'item'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'apple'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'orange'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          name: <span class="string">'banana'</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h3><h4 id="1-实现组件化布局"><a href="#1-实现组件化布局" class="headerlink" title="1.  实现组件化布局"></a>1.  实现组件化布局</h4><ul>
<li>把静态页面转换成组件化模式</li>
<li>把组件渲染到页面上</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 2、把组件渲染到页面上 --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   # 1、 把静态页面转换成组件化模式</span><br><span class="line">   # 1.1  标题组件 </span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTitle = &#123;</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;我的商品&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   # 1.2  商品列表组件 </span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartList = &#123;</span></span><br><span class="line">     #  注意点 ：  组件模板必须是单个根元素  </span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/a.jpg"</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/b.jpg"</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/c.jpg"</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/d.jpg"</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/e.jpg"</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   # 1.3  商品结算组件 </span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTotal = &#123;</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line">   ## 1.4  定义一个全局组件 my-cart</span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'my-cart'</span>,&#123;</span></span><br><span class="line">     ##  1.6 引入子组件  </span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-title</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-list</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-total</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     # 1.5  注册子组件   </span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="actionscript">       <span class="string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-实现标题和结算功能组件"><a href="#2-实现标题和结算功能组件" class="headerlink" title="2 实现标题和结算功能组件"></a>2 实现标题和结算功能组件</h4><ul>
<li>标题组件实现动态渲染<ul>
<li>从父组件把标题数据传递过来 即 父向子组件传值</li>
<li>把传递过来的数据渲染到页面上  </li>
</ul>
</li>
<li>结算功能组件<ul>
<li>从父组件把商品列表list 数据传递过来 即 父向子组件传值</li>
<li>把传递过来的数据计算最终价格渲染到页面上  </li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    # 2.2  标题组件     子组件通过props形式接收父组件传递过来的uname数据</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'uname'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><span class="template-variable">&#123;&#123;uname&#125;&#125;</span><span class="xml">的商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line"># 2.3  商品结算组件  子组件通过props形式接收父组件传递过来的list数据   </span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：</span><span class="template-variable">&#123;&#123;total&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     computed: &#123;</span><br><span class="line">       # 2.4    计算商品的总价  并渲染到页面上 </span><br><span class="line"><span class="actionscript">       total: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">           t += item.price * item.num;</span><br><span class="line">         &#125;);</span><br><span class="line"><span class="actionscript">         <span class="keyword">return</span> t;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">     data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">         uname: <span class="string">'张三'</span>,</span></span><br><span class="line">         list: [&#123;</span><br><span class="line">           id: 1,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'TCL彩电'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/a.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 2,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'机顶盒'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/b.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 3,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'海尔冰箱'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/c.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 4,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'小米手机'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/d.jpg'</span></span></span><br><span class="line">         &#125;,&#123;</span><br><span class="line">           id: 5,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'PPTV电视'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 2,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/e.jpg'</span></span></span><br><span class="line">         &#125;]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     #  2.1  父组件向子组件以属性传递的形式 传递数据</span><br><span class="line">     #   向 标题组件传递 uname 属性   向 商品结算组件传递 list  属性  </span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-title</span> <span class="attr">:uname</span>=<span class="string">'uname'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-list</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-total</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="actionscript">       <span class="string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-实现列表组件删除功能"><a href="#3-实现列表组件删除功能" class="headerlink" title="3.  实现列表组件删除功能"></a>3.  实现列表组件删除功能</h4><ul>
<li>从父组件把商品列表list 数据传递过来 即 父向子组件传值</li>
<li>把传递过来的数据渲染到页面上    </li>
<li>点击删除按钮的时候删除对应的数据 <ul>
<li>给按钮添加点击事件把需要删除的id传递过来  <ul>
<li>子组件中不推荐操作父组件的数据有可能多个子组件使用父组件的数据  我们需要把数据传递给父组件让父组件操作数据 </li>
<li>父组件删除对应的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'uname'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><span class="template-variable">&#123;&#123;uname&#125;&#125;</span><span class="xml">的商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;</span><br><span class="line">    #  3.2 把列表数据动态渲染到页面上  </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">          &lt;div :key=<span class="string">'item.id'</span> v-<span class="keyword">for</span>=<span class="string">'item in list'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">              &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">			# 3.3  给按钮添加点击事件把需要删除的id传递过来</span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span> @click=<span class="string">'del(item.id)'</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        del: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line">           # 3.4 子组件中不推荐操作父组件的数据有可能多个子组件使用父组件的数据 </span><br><span class="line">          # 	  我们需要把数据传递给父组件 让父组件操作数据 </span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'cart-del'</span>, id);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：</span><span class="template-variable">&#123;&#123;total&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="actionscript">        total: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            t += item.price * item.num;</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> t;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">      data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          uname: <span class="string">'张三'</span>,</span></span><br><span class="line">          list: [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'TCL彩电'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/a.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'机顶盒'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/b.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'海尔冰箱'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/c.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 4,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'小米手机'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/d.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 5,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'PPTV电视'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 2,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/e.jpg'</span></span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      # 3.1 从父组件把商品列表list 数据传递过来 即 父向子组件传值  </span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-title</span> <span class="attr">:uname</span>=<span class="string">'uname'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span></span></span></span><br><span class="line">		  #  3.5  父组件通过事件绑定 接收子组件传递过来的数据 </span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-list</span> <span class="attr">:list</span>=<span class="string">'list'</span> @<span class="attr">cart-del</span>=<span class="string">'delCart($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-total</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cart-total'</span>: CartTotal</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        # 3.6    根据id删除list中对应的数据        </span><br><span class="line"><span class="actionscript">        delCart: <span class="function"><span class="keyword">function</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 1、找到id所对应数据的索引</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> item.id == id;</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="comment">// 2、根据索引删除对应数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-实现组件更新数据功能-上"><a href="#4-实现组件更新数据功能-上" class="headerlink" title="4.   实现组件更新数据功能  上"></a>4.   实现组件更新数据功能  上</h4><ul>
<li>将输入框中的默认数据动态渲染出来</li>
<li>输入框失去焦点的时候 更改商品的数量 </li>
<li>子组件中不推荐操作数据 把这些数据传递给父组件 让父组件处理这些数据</li>
<li>父组件中接收子组件传递过来的数据并处理 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'uname'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><span class="template-variable">&#123;&#123;uname&#125;&#125;</span><span class="xml">的商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         &lt;div :key=<span class="string">'item.id'</span> v-<span class="keyword">for</span>=<span class="string">'item in list'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line">			# 1. 将输入框中的默认数据动态渲染出来</span><br><span class="line">			# 2. 输入框失去焦点的时候 更改商品的数量  需要将当前商品的id 传递过来</span><br><span class="line"><span class="javascript">             &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> :value=<span class="string">'item.num'</span> @blur=<span class="string">'changeNum(item.id, $event)'</span>/&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span> @click=<span class="string">'del(item.id)'</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       changeNum: <span class="function"><span class="keyword">function</span><span class="params">(id, event)</span></span>&#123;</span></span><br><span class="line">         # 3 子组件中不推荐操作数据  因为别的组件可能也引用了这些数据</span><br><span class="line">         #  把这些数据传递给父组件 让父组件处理这些数据</span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.$emit(<span class="string">'change-num'</span>, &#123;</span></span><br><span class="line">           id: id,</span><br><span class="line">           num: event.target.value</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line"><span class="actionscript">       del: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 把id传递给父组件</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.$emit(<span class="string">'cart-del'</span>, id);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="actionscript">     props: [<span class="string">'list'</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：</span><span class="template-variable">&#123;&#123;total&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     computed: &#123;</span><br><span class="line"><span class="actionscript">       total: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">           t += item.price * item.num;</span><br><span class="line">         &#125;);</span><br><span class="line"><span class="actionscript">         <span class="keyword">return</span> t;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   Vue.component(<span class="string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">     data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">         uname: <span class="string">'张三'</span>,</span></span><br><span class="line">         list: [&#123;</span><br><span class="line">           id: 1,</span><br><span class="line"><span class="actionscript">           name: <span class="string">'TCL彩电'</span>,</span></span><br><span class="line">           price: 1000,</span><br><span class="line">           num: 1,</span><br><span class="line"><span class="actionscript">           img: <span class="string">'img/a.jpg'</span></span></span><br><span class="line">         &#125;]</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="javascript">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-title</span> <span class="attr">:uname</span>=<span class="string">'uname'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span></span></span></span><br><span class="line">		# 4  父组件中接收子组件传递过来的数据 </span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-list</span> <span class="attr">:list</span>=<span class="string">'list'</span> @<span class="attr">change-num</span>=<span class="string">'changeNum($event)'</span> @<span class="attr">cart-del</span>=<span class="string">'delCart($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">cart-total</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     components: &#123;</span><br><span class="line"><span class="actionscript">       <span class="string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="actionscript">       <span class="string">'cart-total'</span>: CartTotal</span></span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="actionscript">       changeNum: <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//4.1 根据子组件传递过来的数据，跟新list中对应的数据</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">this</span>.list.some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line">           if(item.id == val.id) &#123;</span><br><span class="line">             item.num = val.num;</span><br><span class="line"><span class="actionscript">             <span class="comment">// 终止遍历</span></span></span><br><span class="line"><span class="actionscript">             <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;,</span><br><span class="line"><span class="actionscript">       delCart: <span class="function"><span class="keyword">function</span><span class="params">(id)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 根据id删除list中对应的数据</span></span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 1、找到id所对应数据的索引</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">return</span> item.id == id;</span></span><br><span class="line">         &#125;);</span><br><span class="line"><span class="actionscript">         <span class="comment">// 2、根据索引删除对应数据</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-实现组件更新数据功能-下"><a href="#5-实现组件更新数据功能-下" class="headerlink" title="5. 实现组件更新数据功能  下"></a>5. 实现组件更新数据功能  下</h4><ul>
<li>子组件通过一个标识符来标记对用的用户点击  + - 或者输入框输入的内容</li>
<li>父组件拿到标识符更新对应的组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.cart</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">      background-color: lightblue;</span><br><span class="line">      height: 40px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="comment">/*color: #fff;*/</span>  </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.total</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#FFCE46</span>;</span></span><br><span class="line">      height: 50px;</span><br><span class="line">      line-height: 50px;</span><br><span class="line">      text-align: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.total</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      margin: 0 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#DC4C40</span>;</span></span><br><span class="line">      height: 35px;</span><br><span class="line">      width: 80px;</span><br><span class="line">      border: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.total</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">      height: 55px;</span><br><span class="line">      line-height: 55px;</span><br><span class="line">      position: relative;</span><br><span class="line"><span class="css">      <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ADD8E6</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">      width: 45px;</span><br><span class="line">      height: 45px;</span><br><span class="line">      margin: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.name</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 90px;</span><br><span class="line">      top: 0;left: 55px;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">      font-size: 20px;</span><br><span class="line">      width: 30px;</span><br><span class="line"><span class="css">      <span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">      background-color: lightgray;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> <span class="selector-class">.num</span> &#123;</span></span><br><span class="line">      width: 40px;</span><br><span class="line">      height: 25px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.del</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 0px;</span><br><span class="line">      width: 40px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-size: 40px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.del</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartTitle = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'uname'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><span class="template-variable">&#123;&#123;uname&#125;&#125;</span><span class="xml">的商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartList = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">          &lt;div :key=<span class="string">'item.id'</span> v-<span class="keyword">for</span>=<span class="string">'item in list'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line">			  # 1.  + - 按钮绑定事件 </span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'sub(item.id)'</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">              &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> :value=<span class="string">'item.num'</span> @blur=<span class="string">'changeNum(item.id, $event)'</span>/&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'add(item.id)'</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span> @click=<span class="string">'del(item.id)'</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        changeNum: <span class="function"><span class="keyword">function</span><span class="params">(id, event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="actionscript">            type: <span class="string">'change'</span>,</span></span><br><span class="line">            num: event.target.value</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        sub: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line">          # 2 数量的增加和减少通过父组件来计算   每次都是加1 和 减1 不需要传递数量   父组件需要一个类型来判断 是 加一 还是减1  以及是输入框输入的数据  我们通过type 标识符来标记 不同的操作   </span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="actionscript">            type: <span class="string">'sub'</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        add: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line">         # 2 数量的增加和减少通过父组件来计算   每次都是加1 和 减1 不需要传递数量   父组件需要一个类型来判断 是 加一 还是减1  以及是输入框输入的数据  我们通过type 标识符来标记 不同的操作</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'change-num'</span>, &#123;</span></span><br><span class="line">            id: id,</span><br><span class="line"><span class="actionscript">            type: <span class="string">'add'</span></span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        del: <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 把id传递给父组件</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'cart-del'</span>, id);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> CartTotal = &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'list'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：</span><span class="template-variable">&#123;&#123;total&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="actionscript">        total: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            t += item.price * item.num;</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> t;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'my-cart'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">      data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          uname: <span class="string">'张三'</span>,</span></span><br><span class="line">          list: [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'TCL彩电'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/a.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'机顶盒'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/b.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'海尔冰箱'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/c.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 4,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'小米手机'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 1,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/d.jpg'</span></span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 5,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'PPTV电视'</span>,</span></span><br><span class="line">            price: 1000,</span><br><span class="line">            num: 2,</span><br><span class="line"><span class="actionscript">            img: <span class="string">'img/e.jpg'</span></span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-title</span> <span class="attr">:uname</span>=<span class="string">'uname'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span>	</span></span></span><br><span class="line">		# 3 父组件通过事件监听   接收子组件的数据  </span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-list</span> <span class="attr">:list</span>=<span class="string">'list'</span> @<span class="attr">change-num</span>=<span class="string">'changeNum($event)'</span> @<span class="attr">cart-del</span>=<span class="string">'delCart($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">cart-total</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'cart-title'</span>: CartTitle,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cart-list'</span>: CartList,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cart-total'</span>: CartTotal</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        changeNum: <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line">          #4 分为三种情况：输入框变更、加号变更、减号变更</span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(val.type==<span class="string">'change'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 根据子组件传递过来的数据，跟新list中对应的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.list.some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line">              if(item.id == val.id) &#123;</span><br><span class="line">                item.num = val.num;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 终止遍历</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val.type==<span class="string">'sub'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 减一操作</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.list.some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line">              if(item.id == val.id) &#123;</span><br><span class="line">                item.num -= 1;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 终止遍历</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val.type==<span class="string">'add'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 加一操作</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.list.some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line">              if(item.id == val.id) &#123;</span><br><span class="line">                item.num += 1;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 终止遍历</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
